/* Generated by Opal 0.8.1 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$localStorage', '$id=', '$unique_id', '$did_create', '$sync_models', '$class', '$call', '$did_update', '$did_destroy', '$getItem', '$name', '$map', '$load', '$parse', '$setItem', '$to_json', '$all', '$to_s', '$to_f', '$now']);
  self.$require("vienna/adapters/base");
  return (function($base) {
    var self = $module($base, 'Vienna');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $LocalAdapter(){};
      var self = $LocalAdapter = $klass($base, $super, 'LocalAdapter', $LocalAdapter);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

      def.storage = nil;
      def.$initialize = function() {
        var self = this;
        if ($gvars.global == null) $gvars.global = nil;

        return self.storage = $gvars.global.$localStorage();
      };

      def.$create_record = TMP_1 = function(record) {
        var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

        TMP_1.$$p = null;
        (($a = [self.$unique_id()]), $b = record, $b['$id='].apply($b, $a), $a[$a.length-1]);
        record.$did_create();
        self.$sync_models(record.$class());
        if (block !== false && block !== nil) {
          return block.$call(record)
          } else {
          return nil
        };
      };

      def.$update_record = TMP_2 = function(record) {
        var self = this, $iter = TMP_2.$$p, block = $iter || nil;

        TMP_2.$$p = null;
        record.$did_update();
        self.$sync_models(record.$class());
        if (block !== false && block !== nil) {
          return block.$call(record)
          } else {
          return nil
        };
      };

      def.$delete_record = TMP_3 = function(record) {
        var self = this, $iter = TMP_3.$$p, block = $iter || nil;

        TMP_3.$$p = null;
        record.$did_destroy();
        self.$sync_models(record.$class());
        if (block !== false && block !== nil) {
          return block.$call(record)
          } else {
          return nil
        };
      };

      def.$find_all = TMP_4 = function(klass) {
        var $a, $b, TMP_5, self = this, $iter = TMP_4.$$p, block = $iter || nil, data = nil, models = nil;

        TMP_4.$$p = null;
        if ((($a = data = self.storage.$getItem(klass.$name())) !== nil && (!$a.$$is_boolean || $a == true))) {
          models = ($a = ($b = $scope.get('JSON').$parse(data)).$map, $a.$$p = (TMP_5 = function(m){var self = TMP_5.$$s || this;
if (m == null) m = nil;
          return klass.$load(m)}, TMP_5.$$s = self, TMP_5), $a).call($b);
          if (block !== false && block !== nil) {
            return block.$call(models)
            } else {
            return nil
          };
          } else {
          return nil
        };
      };

      def.$sync_models = function(klass) {
        var self = this, name = nil;

        name = klass.$name();
        return self.storage.$setItem(name, klass.$all().$to_json());
      };

      return (def.$unique_id = function() {
        var self = this;

        return ($rb_times($scope.get('Time').$now().$to_f(), 1000)).$to_s();
      }, nil) && 'unique_id';
    })(self, $scope.get('Adapter'))
  })(self);
})(Opal);
