/* Generated by Opal 0.8.1 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$include', '$attr_reader', '$inspect', '$content', '$each', '$array_did_change', '$attribute_did_change', '$<<', '$length', '$array_content_did_change', '$index', '$delete_at', '$raise', '$insert', '$clear']);
  self.$require("vienna/observable");
  return (function($base) {
    var self = $module($base, 'Vienna');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'ObservableArray');

      var def = self.$$proto, $scope = self.$$scope;

      self.$include((($scope.get('Vienna')).$$scope.get('Observable')));

      self.$attr_reader("content");

      Opal.defn(self, '$initialize', function(content) {
        var self = this;

        if (content == null) {
          content = []
        }
        return self.content = content;
      });

      Opal.defn(self, '$inspect', function() {
        var self = this;

        return "#<ObservableArray: " + (self.$content().$inspect()) + ">";
      });

      Opal.defn(self, '$to_s', def.$inspect);

      Opal.defn(self, '$array_content_did_change', function(idx, removed, added) {
        var $a, $b, TMP_1, self = this, observers = nil;
        if (self.array_observers == null) self.array_observers = nil;

        if ((($a = observers = self.array_observers) !== nil && (!$a.$$is_boolean || $a == true))) {
          ($a = ($b = observers).$each, $a.$$p = (TMP_1 = function(obj){var self = TMP_1.$$s || this;
if (obj == null) obj = nil;
          return obj.$array_did_change(self, idx, removed, added)}, TMP_1.$$s = self, TMP_1), $a).call($b)};
        self.$attribute_did_change("size");
        self.$attribute_did_change("content");
        return self.$attribute_did_change("empty?");
      });

      Opal.defn(self, '$add_array_observer', function(obj) {
        var $a, self = this;
        if (self.array_observers == null) self.array_observers = nil;

        return (((($a = self.array_observers) !== false && $a !== nil) ? $a : self.array_observers = []))['$<<'](obj);
      });

      Opal.defn(self, '$<<', function(obj) {
        var self = this, length = nil;
        if (self.content == null) self.content = nil;

        length = self.content.$length();
        self.content['$<<'](obj);
        self.$array_content_did_change(length, 0, 1);
        return self;
      });

      Opal.defn(self, '$delete', function(obj) {
        var $a, self = this, idx = nil;
        if (self.content == null) self.content = nil;

        if ((($a = idx = self.content.$index(obj)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.content.$delete_at(idx);
          self.$array_content_did_change(idx, 1, 0);};
        return obj;
      });

      Opal.defn(self, '$insert', function(idx, obj) {
        var self = this;
        if (self.content == null) self.content = nil;

        if ($rb_gt(idx, self.content.$length())) {
          self.$raise($scope.get('ArgumentError'), "out of range")};
        self.content.$insert(idx, obj);
        self.$array_content_did_change(idx, 0, 1);
        return self;
      });

      Opal.defn(self, '$clear', function() {
        var self = this, length = nil;
        if (self.content == null) self.content = nil;

        length = self.content.$length();
        self.content.$clear();
        self.$array_content_did_change(0, length, 0);
        return self;
      });

      Opal.defn(self, '$push', def['$<<']);
    })(self)
  })(self);
})(Opal);
