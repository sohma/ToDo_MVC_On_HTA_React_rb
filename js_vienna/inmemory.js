/* Generated by Opal 0.8.1 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$require', '$<<', '$new', '$unique_id', '$id=', '$did_create', '$sync_models', '$call', '$did_update', '$class', '$did_destroy', '$getItem', '$respond_to?', '$setItem', '$to_s', '$to_f', '$now']);
  self.$require("vienna/adapters/base");
  (function($base, $super) {
    function $InMemory(){};
    var self = $InMemory = $klass($base, $super, 'InMemory', $InMemory);

    var def = self.$$proto, $scope = self.$$scope;

    def.hash_list = nil;
    def.$initialize = function() {
      var self = this;

      self.hash_list = [];
      return (Opal.cvars['@@unique_id'] = 0);
    };

    def.$setItem = function(item) {
      var self = this;

      return self.hash_list['$<<'](item);
    };

    def.$getItem = function() {
      var self = this;

      return self.hash_list;
    };

    return (def.$unique_id = function() {
      var $a, self = this;

      return (Opal.cvars['@@unique_id'] = $rb_plus((($a = Opal.cvars['@@unique_id']) == null ? nil : $a), 1));
    }, nil) && 'unique_id';
  })(self, null);
  return (function($base) {
    var self = $module($base, 'Vienna');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $InMemoryAdapter(){};
      var self = $InMemoryAdapter = $klass($base, $super, 'InMemoryAdapter', $InMemoryAdapter);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

      def.storage = nil;
      def.$initialize = function() {
        var self = this;

        return self.storage = $scope.get('InMemory').$new();
      };

      def.$create_record = TMP_1 = function(record) {
        var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil, id = nil;

        TMP_1.$$p = null;
        id = self.storage.$unique_id();
        (($a = [id]), $b = record, $b['$id='].apply($b, $a), $a[$a.length-1]);
        record.$did_create();
        self.$sync_models(record);
        if (block !== false && block !== nil) {
          return block.$call(record)
          } else {
          return nil
        };
      };

      def.$update_record = TMP_2 = function(record) {
        var self = this, $iter = TMP_2.$$p, block = $iter || nil;

        TMP_2.$$p = null;
        record.$did_update();
        self.$sync_models(record.$class());
        if (block !== false && block !== nil) {
          return block.$call(record)
          } else {
          return nil
        };
      };

      def.$delete_record = TMP_3 = function(record) {
        var self = this, $iter = TMP_3.$$p, block = $iter || nil;

        TMP_3.$$p = null;
        record.$did_destroy();
        self.$sync_models(record.$class());
        if (block !== false && block !== nil) {
          return block.$call(record)
          } else {
          return nil
        };
      };

      def.$find_all = TMP_4 = function(klass) {
        var $a, self = this, $iter = TMP_4.$$p, block = $iter || nil, data = nil, models = nil;

        TMP_4.$$p = null;
        if ((($a = data = self.storage.$getItem()) !== nil && (!$a.$$is_boolean || $a == true))) {
          models = data;
          if (block !== false && block !== nil) {
            return block.$call(models)
            } else {
            return nil
          };
          } else {
          return nil
        };
      };

      def.$sync_models = function(item) {
        var $a, self = this;

        if ((($a = item['$respond_to?']("id")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.storage.$setItem(item)
          } else {
          return nil
        };
      };

      return (def.$unique_id = function() {
        var self = this;

        return ($rb_times($scope.get('Time').$now().$to_f(), 1000)).$to_s();
      }, nil) && 'unique_id';
    })(self, $scope.get('Adapter'))
  })(self);
})(Opal);
