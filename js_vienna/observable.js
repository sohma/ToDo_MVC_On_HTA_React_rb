/* Generated by Opal 0.8.1 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $klass = Opal.klass;

  Opal.add_stubs(['$include?', '$create', '$[]', '$[]=', '$replace_writer_for', '$<<', '$delete', '$respond_to?', '$__send__', '$each', '$call', '$define_singleton_method', '$attribute_did_change', '$split', '$new', '$next=', '$drop', '$object=', '$handler=', '$attr_accessor', '$==', '$add_observer', '$value_changed']);
  return (function($base) {
    var self = $module($base, 'Vienna');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Observable');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_4;

      Opal.defn(self, '$add_observer', TMP_1 = function(attribute) {
        var $a, self = this, $iter = TMP_1.$$p, handler = $iter || nil, observers = nil, handlers = nil;
        if (self.attr_observers == null) self.attr_observers = nil;

        TMP_1.$$p = null;
        if ((($a = observers = self.attr_observers) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          observers = self.attr_observers = $hash2([], {})
        };
        if ((($a = attribute['$include?'](".")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return $scope.get('PathObserver').$create(self, attribute, handler)};
        if ((($a = handlers = observers['$[]'](attribute)) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          handlers = observers['$[]='](attribute, []);
          self.$replace_writer_for(attribute);
        };
        return handlers['$<<'](handler);
      });

      Opal.defn(self, '$remove_observer', function(attribute, handler) {
        var $a, self = this, handlers = nil;
        if (self.attr_observers == null) self.attr_observers = nil;

        if ((($a = self.attr_observers) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          return nil
        };
        if ((($a = handlers = self.attr_observers['$[]'](attribute)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return handlers.$delete(handler)
          } else {
          return nil
        };
      });

      Opal.defn(self, '$attribute_did_change', function(attribute) {
        var $a, $b, TMP_2, self = this, handlers = nil, new_val = nil;
        if (self.attr_observers == null) self.attr_observers = nil;

        if ((($a = self.attr_observers) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          return nil
        };
        if ((($a = handlers = self.attr_observers['$[]'](attribute)) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = self['$respond_to?'](attribute)) !== nil && (!$a.$$is_boolean || $a == true))) {
            new_val = self.$__send__(attribute)};
          return ($a = ($b = handlers).$each, $a.$$p = (TMP_2 = function(h){var self = TMP_2.$$s || this;
if (h == null) h = nil;
          return h.$call(new_val)}, TMP_2.$$s = self, TMP_2), $a).call($b);
          } else {
          return nil
        };
      });

      Opal.defn(self, '$replace_writer_for', TMP_4 = function(attribute) {
        var $a, $b, TMP_3, self = this;

        if ((($a = self['$respond_to?']("" + (attribute) + "=")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = self).$define_singleton_method, $a.$$p = (TMP_3 = function(val){var self = TMP_3.$$s || this, result = nil;
if (val == null) val = nil;
          result = Opal.find_iter_super_dispatcher(self, 'replace_writer_for', (TMP_3.$$def || TMP_4), null).apply(self, [val]);
            self.$attribute_did_change(attribute);
            return result;}, TMP_3.$$s = self, TMP_3), $a).call($b, "" + (attribute) + "=")
          } else {
          return nil
        };
      });
    })(self);

    (function($base, $super) {
      function $PathObserver(){};
      var self = $PathObserver = $klass($base, $super, 'PathObserver', $PathObserver);

      var def = self.$$proto, $scope = self.$$scope;

      def.object = def.attr = def.next = def.handler = nil;
      Opal.defs(self, '$create', function(object, path, handler) {
        var $a, $b, TMP_5, $c, self = this, parts = nil, base = nil, last = nil;

        parts = path.$split(".");
        base = $scope.get('PathObserver').$new(parts['$[]'](0));
        last = base;
        ($a = ($b = parts.$drop(1)).$each, $a.$$p = (TMP_5 = function(attr){var self = TMP_5.$$s || this, $a, $b;
if (attr == null) attr = nil;
        return last = (($a = [$scope.get('PathObserver').$new(attr)]), $b = last, $b['$next='].apply($b, $a), $a[$a.length-1])}, TMP_5.$$s = self, TMP_5), $a).call($b);
        (($a = [object]), $c = base, $c['$object='].apply($c, $a), $a[$a.length-1]);
        return (($a = [handler]), $c = last, $c['$handler='].apply($c, $a), $a[$a.length-1]);
      });

      self.$attr_accessor("next", "handler");

      def.$initialize = function(attr) {
        var self = this;

        return self.attr = attr;
      };

      def['$object='] = function(obj) {
        var $a, $b, TMP_6, self = this;

        if (obj['$=='](self.object)) {
          return nil};
        if ((($a = self.object = obj) !== nil && (!$a.$$is_boolean || $a == true))) {
          ($a = ($b = obj).$add_observer, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

          return self.$value_changed()}, TMP_6.$$s = self, TMP_6), $a).call($b, self.attr)};
        return self.$value_changed();
      };

      return (def.$value_changed = function() {
        var $a, $b, self = this, value = nil;

        value = self.object.$__send__(self.attr);
        if ((($a = self.next) !== nil && (!$a.$$is_boolean || $a == true))) {
          (($a = [value]), $b = self.next, $b['$object='].apply($b, $a), $a[$a.length-1])};
        if ((($a = self.handler) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.handler.$call(value)
          } else {
          return nil
        };
      }, nil) && 'value_changed';
    })(self, null);
  })(self)
})(Opal);
