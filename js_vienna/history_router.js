/* Generated by Opal 0.8.1 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$attr_reader', '$location', '$on', '$update', '$instance_eval', '$to_proc', '$new', '$<<', '$empty?', '$pathname', '$==', '$match', '$find']);
  self.$require("opal-jquery");
  return (function($base) {
    var self = $module($base, 'Vienna');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $HistoryRouter(){};
      var self = $HistoryRouter = $klass($base, $super, 'HistoryRouter', $HistoryRouter);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3;

      def.routes = def.location = def.path = nil;
      self.$attr_reader("path", "routes");

      def.$initialize = TMP_1 = function() {
        var $a, $b, TMP_2, $c, self = this, $iter = TMP_1.$$p, block = $iter || nil;
        if ($gvars.global == null) $gvars.global = nil;

        TMP_1.$$p = null;
        self.routes = [];
        self.location = $gvars.global.$location();
        ($a = ($b = $scope.get('Window')).$on, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

        return self.$update()}, TMP_2.$$s = self, TMP_2), $a).call($b, "popstate");
        if (block !== false && block !== nil) {
          return ($a = ($c = self).$instance_eval, $a.$$p = block.$to_proc(), $a).call($c)
          } else {
          return nil
        };
      };

      def.$route = TMP_3 = function(path) {
        var $a, $b, self = this, $iter = TMP_3.$$p, handler = $iter || nil, route = nil;

        TMP_3.$$p = null;
        route = ($a = ($b = (($scope.get('Router')).$$scope.get('Route'))).$new, $a.$$p = handler.$to_proc(), $a).call($b, path);
        self.routes['$<<'](route);
        return route;
      };

      def.$update = function() {
        var $a, self = this, path = nil;

        path = (function() {if ((($a = self.location.$pathname()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "/"
          } else {
          return self.location.$pathname()
        }; return nil; })();
        if (self.path['$=='](path)) {
          return nil
          } else {
          self.path = path;
          return self.$match(self.path);
        };
      };

      def.$match = function(path) {
        var $a, $b, TMP_4, self = this;

        return ($a = ($b = self.routes).$find, $a.$$p = (TMP_4 = function(r){var self = TMP_4.$$s || this;
if (r == null) r = nil;
        return r.$match(path)}, TMP_4.$$s = self, TMP_4), $a).call($b);
      };

      return (def.$navigate = function(path) {
        var self = this;

        history.pushState(null, null, path);
        return self.$update();
      }, nil) && 'navigate';
    })(self, null)
  })(self);
})(Opal);
