/* Generated by Opal 0.8.1 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$define_method', '$proc', '$__send__', '$<<', '$events', '$attr_accessor', '$create_element', '$add_class', '$class_name', '$setup_events', '$parent', '$element', '$class', '$find', '$new', '$tag_name', '$map', '$instance_exec', '$to_proc', '$on', '$each', '$off', '$remove', '$teardown_events']);
  return (function($base) {
    var self = $module($base, 'Vienna');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $View(){};
      var self = $View = $klass($base, $super, 'View', $View);

      var def = self.$$proto, $scope = self.$$scope, TMP_3;

      def.element = def.dom_events = nil;
      Opal.defs(self, '$element', function(selector) {
        var self = this;
        if (self.element == null) self.element = nil;

        if (selector == null) {
          selector = nil
        }
        if (selector !== false && selector !== nil) {
          return self.element = selector
          } else {
          return self.element
        };
      });

      Opal.defs(self, '$tag_name', function(tag) {
        var $a, $b, TMP_1, self = this;

        if (tag == null) {
          tag = nil
        }
        if (tag !== false && tag !== nil) {
          return ($a = ($b = self).$define_method, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;

          return tag}, TMP_1.$$s = self, TMP_1), $a).call($b, "tag_name")
          } else {
          return nil
        };
      });

      Opal.defs(self, '$class_name', function(css_class) {
        var $a, $b, TMP_2, self = this;

        if (css_class == null) {
          css_class = nil
        }
        if (css_class !== false && css_class !== nil) {
          return ($a = ($b = self).$define_method, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

          return css_class}, TMP_2.$$s = self, TMP_2), $a).call($b, "class_name")
          } else {
          return nil
        };
      });

      Opal.defs(self, '$events', function() {
        var $a, self = this;
        if (self.events == null) self.events = nil;

        return ((($a = self.events) !== false && $a !== nil) ? $a : self.events = []);
      });

      Opal.defs(self, '$on', TMP_3 = function(name, selector, method) {
        var $a, $b, TMP_4, self = this, $iter = TMP_3.$$p, handler = $iter || nil;

        if (selector == null) {
          selector = nil
        }
        if (method == null) {
          method = nil
        }
        TMP_3.$$p = null;
        if (method !== false && method !== nil) {
          handler = ($a = ($b = self).$proc, $a.$$p = (TMP_4 = function(evt){var self = TMP_4.$$s || this;
if (evt == null) evt = nil;
          return self.$__send__(method, evt)}, TMP_4.$$s = self, TMP_4), $a).call($b)};
        return self.$events()['$<<']([name, selector, handler]);
      });

      self.$attr_accessor("parent");

      def.$element = function() {
        var $a, self = this;

        if ((($a = self.element) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.element};
        self.element = self.$create_element();
        self.element.$add_class(self.$class_name());
        self.$setup_events();
        return self.element;
      };

      def.$create_element = function() {
        var $a, self = this, scope = nil, el = nil, e = nil;

        scope = ((function() {if ((($a = self.$parent()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$parent().$element()
          } else {
          return $scope.get('Element')
        }; return nil; })());
        if ((($a = el = self.$class().$element()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return scope.$find(el)
          } else {
          e = scope.$new(self.$tag_name());
          return e.$add_class(self.$class_name());
        };
      };

      def.$render = function() {
        var self = this;

        return nil;
      };

      def.$class_name = function() {
        var self = this;

        return "";
      };

      def.$tag_name = function() {
        var self = this;

        return "div";
      };

      def.$find = function(selector) {
        var self = this;

        return self.$element().$find(selector);
      };

      def.$setup_events = function() {
        var $a, $b, TMP_5, self = this, el = nil;

        if ((($a = self.dom_events) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.dom_events};
        el = self.$element();
        return self.dom_events = ($a = ($b = self.$class().$events()).$map, $a.$$p = (TMP_5 = function(event){var self = TMP_5.$$s || this, $a, $b, TMP_6, $c, name = nil, selector = nil, handler = nil, wrapper = nil;
if (event == null) event = nil;
        $a = Opal.to_ary(event), name = ($a[0] == null ? nil : $a[0]), selector = ($a[1] == null ? nil : $a[1]), handler = ($a[2] == null ? nil : $a[2]);
          wrapper = ($a = ($b = self).$proc, $a.$$p = (TMP_6 = function(e){var self = TMP_6.$$s || this, $a, $b;
if (e == null) e = nil;
          return ($a = ($b = self).$instance_exec, $a.$$p = handler.$to_proc(), $a).call($b, e)}, TMP_6.$$s = self, TMP_6), $a).call($b);
          ($a = ($c = el).$on, $a.$$p = wrapper.$to_proc(), $a).call($c, name, selector);
          return [name, selector, wrapper];}, TMP_5.$$s = self, TMP_5), $a).call($b);
      };

      def.$teardown_events = function() {
        var $a, $b, TMP_7, self = this, el = nil;

        el = self.$element();
        return ($a = ($b = self.dom_events).$each, $a.$$p = (TMP_7 = function(event){var self = TMP_7.$$s || this, $a, $b, name = nil, selector = nil, wrapper = nil;
if (event == null) event = nil;
        $a = Opal.to_ary(event), name = ($a[0] == null ? nil : $a[0]), selector = ($a[1] == null ? nil : $a[1]), wrapper = ($a[2] == null ? nil : $a[2]);
          return ($a = ($b = el).$off, $a.$$p = wrapper.$to_proc(), $a).call($b, name, selector);}, TMP_7.$$s = self, TMP_7), $a).call($b);
      };

      def.$remove = function() {
        var self = this;

        return self.$element().$remove();
      };

      return (def.$destroy = function() {
        var self = this;

        self.$teardown_events();
        return self.$remove();
      }, nil) && 'destroy';
    })(self, null)
  })(self)
})(Opal);
