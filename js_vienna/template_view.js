/* Generated by Opal 0.8.1 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$name', '$underscore', '$demodulize', '$sub', '$before_render', '$[]', '$template', '$class', '$html=', '$_render_template', '$element', '$after_render', '$render', '$new', '$instance_exec', '$to_proc', '$body']);
  self.$require("template");
  self.$require("vienna/view");
  self.$require("vienna/output_buffer");
  self.$require("active_support/core_ext/string");
  return (function($base) {
    var self = $module($base, 'Vienna');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $TemplateView(){};
      var self = $TemplateView = $klass($base, $super, 'TemplateView', $TemplateView);

      var def = self.$$proto, $scope = self.$$scope;

      def.output_buffer = nil;
      Opal.defs(self, '$template', function(name) {
        var $a, self = this;
        if (self.template == null) self.template = nil;

        if (name == null) {
          name = nil
        }
        if (name !== false && name !== nil) {
          return self.template = name
        } else if ((($a = self.template) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.template
        } else if ((($a = name = self.$name()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.template = name.$sub(/View$/, "").$demodulize().$underscore()
          } else {
          return nil
        };
      });

      def.$render = function() {
        var $a, $b, self = this, template = nil;

        self.$before_render();
        if ((($a = template = $scope.get('Template')['$[]'](self.$class().$template())) !== nil && (!$a.$$is_boolean || $a == true))) {
          (($a = [self.$_render_template(template)]), $b = self.$element(), $b['$html='].apply($b, $a), $a[$a.length-1])};
        return self.$after_render();
      };

      def.$partial = function(name) {
        var self = this;

        return $scope.get('Template')['$[]'](name).$render(self);
      };

      def.$_render_template = function(template) {
        var $a, $b, self = this;

        self.output_buffer = $scope.get('OutputBuffer').$new();
        return ($a = ($b = self).$instance_exec, $a.$$p = template.$body().$to_proc(), $a).call($b, self.output_buffer);
      };

      def.$before_render = function() {
        var self = this;

        return nil;
      };

      return (def.$after_render = function() {
        var self = this;

        return nil;
      }, nil) && 'after_render';
    })(self, $scope.get('View'))
  })(self);
})(Opal);
