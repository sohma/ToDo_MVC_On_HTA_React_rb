/* Generated by Opal 0.8.1 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$new', '$[]=', '$<<', '$[]', '$delete', '$each', '$call']);
  return (function($base) {
    var self = $module($base, 'Vienna');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Eventable');

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      Opal.defn(self, '$on', TMP_1 = function(name) {
        var $a, $b, $c, TMP_2, self = this, $iter = TMP_1.$$p, handler = $iter || nil;
        if (self.eventable == null) self.eventable = nil;

        TMP_1.$$p = null;
        ((($a = self.eventable) !== false && $a !== nil) ? $a : self.eventable = ($b = ($c = $scope.get('Hash')).$new, $b.$$p = (TMP_2 = function(hash, key){var self = TMP_2.$$s || this;
if (hash == null) hash = nil;if (key == null) key = nil;
        return hash['$[]='](key, [])}, TMP_2.$$s = self, TMP_2), $b).call($c));
        self.eventable['$[]'](name)['$<<'](handler);
        return handler;
      });

      Opal.defn(self, '$off', function(name, handler) {
        var $a, $b, self = this, evts = nil;
        if (self.eventable == null) self.eventable = nil;

        if ((($a = ($b = self.eventable, $b !== false && $b !== nil ?evts = self.eventable['$[]'](name) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return evts.$delete(handler)
          } else {
          return nil
        };
      });

      Opal.defn(self, '$trigger', function(name, args) {
        var $a, $b, $c, TMP_3, TMP_4, self = this;
        if (self.eventable == null) self.eventable = nil;

        args = $slice.call(arguments, 1);
        ((($a = self.eventable) !== false && $a !== nil) ? $a : self.eventable = ($b = ($c = $scope.get('Hash')).$new, $b.$$p = (TMP_3 = function(hash, key){var self = TMP_3.$$s || this;
if (hash == null) hash = nil;if (key == null) key = nil;
        return hash['$[]='](key, [])}, TMP_3.$$s = self, TMP_3), $b).call($c));
        return ($a = ($b = self.eventable['$[]'](name)).$each, $a.$$p = (TMP_4 = function(handler){var self = TMP_4.$$s || this, $a;
if (handler == null) handler = nil;
        return ($a = handler).$call.apply($a, [].concat(args))}, TMP_4.$$s = self, TMP_4), $a).call($b);
      });
    })(self)
  })(self)
})(Opal);
