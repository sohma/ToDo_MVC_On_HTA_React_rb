/* Generated by Opal 0.8.1 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$include', '$extend', '$attr_accessor', '$attr_writer', '$attr_reader', '$new', '$reset!', '$each', '$attribute', '$<<', '$columns', '$raise', '$[]', '$identity_map', '$find', '$to_proc', '$adapter', '$primary_key', '$id=', '$[]=', '$all', '$load', '$save', '$fetch', '$has_key?', '$!', '$empty?', '$instance_variable_set', '$id', '$__send__', '$class', '$to_json', '$as_json', '$trigger', '$name', '$join', '$map', '$inspect', '$loaded=', '$new_record=', '$attributes=', '$trigger_events', '$create', '$update', '$create_record', '$update_record', '$delete_record', '$delete', '$push', '$instance_variable_get', '$respond_to?']);
  self.$require("vienna/eventable");
  self.$require("vienna/record_array");
  return (function($base) {
    var self = $module($base, 'Vienna');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Model(){};
      var self = $Model = $klass($base, $super, 'Model', $Model);

      var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_7, TMP_8, TMP_9, TMP_10;

      def.new_record = def.destroyed = def.loaded = nil;
      self.$include($scope.get('Eventable'));

      self.$extend($scope.get('Eventable'));

      self.$attr_accessor("id");

      self.$attr_writer("loaded");

      self.$attr_writer("new_record");

      (function(self) {
        var $scope = self.$$scope, def = self.$$proto;

        self.$attr_reader("identity_map");
        return self.$attr_reader("all");
      })(self.$singleton_class());

      Opal.defs(self, '$reset!', function() {
        var self = this;

        self.identity_map = $hash2([], {});
        return self.all = $scope.get('RecordArray').$new();
      });

      Opal.defs(self, '$inherited', function(base) {
        var self = this;

        return base['$reset!']();
      });

      Opal.defs(self, '$attributes', function(attributes) {
        var $a, $b, TMP_1, self = this;

        attributes = $slice.call(arguments, 0);
        return ($a = ($b = attributes).$each, $a.$$p = (TMP_1 = function(name){var self = TMP_1.$$s || this;
if (name == null) name = nil;
        return self.$attribute(name)}, TMP_1.$$s = self, TMP_1), $a).call($b);
      });

      Opal.defs(self, '$attribute', function(name) {
        var self = this;

        self.$columns()['$<<'](name);
        return self.$attr_accessor(name);
      });

      Opal.defs(self, '$columns', function() {
        var $a, self = this;
        if (self.columns == null) self.columns = nil;

        return ((($a = self.columns) !== false && $a !== nil) ? $a : self.columns = []);
      });

      Opal.defs(self, '$primary_key', function(primary_key) {
        var $a, self = this;
        if (self.primary_key == null) self.primary_key = nil;

        if (primary_key == null) {
          primary_key = nil
        }
        if (primary_key !== false && primary_key !== nil) {
          return self.primary_key = primary_key
          } else {
          return ((($a = self.primary_key) !== false && $a !== nil) ? $a : self.primary_key = "id")
        };
      });

      Opal.defs(self, '$adapter', function(klass) {
        var $a, self = this;
        if (self.adapter == null) self.adapter = nil;

        if (klass == null) {
          klass = nil
        }
        if (klass !== false && klass !== nil) {
          return self.adapter = klass.$new()};
        return ((($a = self.adapter) !== false && $a !== nil) ? $a : self.$raise("No adapter for " + (self)));
      });

      Opal.defs(self, '$find', TMP_2 = function(id) {
        var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil, record = nil;

        TMP_2.$$p = null;
        if ((($a = record = self.$identity_map()['$[]'](id)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return record};
        record = self.$new();
        return ($a = ($b = self.$adapter()).$find, $a.$$p = block.$to_proc(), $a).call($b, record, id);
      });

      Opal.defs(self, '$load', function(attributes) {
        var $a, $b, self = this, id = nil, map = nil, model = nil;

        if ((($a = id = attributes['$[]'](self.$primary_key())) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$raise($scope.get('ArgumentError'), "no id (" + (self.$primary_key()) + ") given")
        };
        map = self.$identity_map();
        if ((($a = model = map['$[]'](id)) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          model = self.$new();
          (($a = [id]), $b = model, $b['$id='].apply($b, $a), $a[$a.length-1]);
          map['$[]='](id, model);
          self.$all()['$<<'](model);
        };
        model.$load(attributes);
        return model;
      });

      Opal.defs(self, '$load_json', function(json) {
        var self = this;

        return self.$load($scope.get('Hash').$new(json));
      });

      Opal.defs(self, '$create', function(attrs) {
        var self = this, model = nil;

        if (attrs == null) {
          attrs = $hash2([], {})
        }
        model = self.$new(attrs);
        model.$save();
        return model;
      });

      Opal.defs(self, '$fetch', TMP_3 = function(options) {
        var $a, $b, self = this, $iter = TMP_3.$$p, block = $iter || nil;

        if (options == null) {
          options = $hash2([], {})
        }
        TMP_3.$$p = null;
        self['$reset!']();
        return ($a = ($b = self.$adapter()).$fetch, $a.$$p = block.$to_proc(), $a).call($b, self, options);
      });

      Opal.defs(self, '$from_form', function(form) {
        var $a, $b, TMP_4, $c, self = this, attrs = nil, model = nil;

        attrs = $hash2([], {});
        ($a = ($b = (form.serializeArray())).$each, $a.$$p = (TMP_4 = function(field){var self = TMP_4.$$s || this, $a, key = nil, val = nil;
if (field == null) field = nil;
        $a = [field.name, field.value], key = $a[0], val = $a[1];
          return attrs['$[]='](key, val);}, TMP_4.$$s = self, TMP_4), $a).call($b);
        model = self.$new(attrs);
        if ((($a = ($c = attrs['$has_key?'](self.$primary_key()), $c !== false && $c !== nil ?attrs['$[]'](self.$primary_key())['$empty?']()['$!']() : $c)) !== nil && (!$a.$$is_boolean || $a == true))) {
          model.$instance_variable_set("@new_record", false)};
        return model;
      });

      def.$as_json = function() {
        var $a, $b, TMP_5, self = this, json = nil;

        json = $hash2([], {});
        if ((($a = self.$id()) !== nil && (!$a.$$is_boolean || $a == true))) {
          json['$[]=']("id", self.$id())};
        ($a = ($b = self.$class().$columns()).$each, $a.$$p = (TMP_5 = function(name){var self = TMP_5.$$s || this;
if (name == null) name = nil;
        return json['$[]='](name, self.$__send__(name))}, TMP_5.$$s = self, TMP_5), $a).call($b);
        return json;
      };

      def.$to_json = function() {
        var self = this;

        return self.$as_json().$to_json();
      };

      def.$trigger_events = function(name) {
        var self = this;

        self.$class().$trigger(name, self);
        return self.$trigger(name);
      };

      def.$inspect = function() {
        var $a, $b, TMP_6, self = this;

        return "#<" + (self.$class().$name()) + ": " + (($a = ($b = self.$class().$columns()).$map, $a.$$p = (TMP_6 = function(name){var self = TMP_6.$$s || this;
if (name == null) name = nil;
        return "" + (name) + "=" + (self.$__send__(name).$inspect())}, TMP_6.$$s = self, TMP_6), $a).call($b).$join(" ")) + ">";
      };

      def.$load = function(attributes) {
        var $a, $b, self = this;

        if (attributes == null) {
          attributes = nil
        }
        (($a = [true]), $b = self, $b['$loaded='].apply($b, $a), $a[$a.length-1]);
        (($a = [false]), $b = self, $b['$new_record='].apply($b, $a), $a[$a.length-1]);
        if (attributes !== false && attributes !== nil) {
          (($a = [attributes]), $b = self, $b['$attributes='].apply($b, $a), $a[$a.length-1])};
        return self.$trigger_events("load");
      };

      def['$new_record?'] = function() {
        var self = this;

        return self.new_record;
      };

      def['$destroyed?'] = function() {
        var self = this;

        return self.destroyed;
      };

      def['$loaded?'] = function() {
        var self = this;

        return self.loaded;
      };

      def.$save = TMP_7 = function() {
        var $a, $b, $c, self = this, $iter = TMP_7.$$p, block = $iter || nil;

        TMP_7.$$p = null;
        if ((($a = self.new_record) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = self).$create, $a.$$p = block.$to_proc(), $a).call($b)
          } else {
          return ($a = ($c = self).$update, $a.$$p = block.$to_proc(), $a).call($c)
        };
      };

      def.$create = TMP_8 = function() {
        var $a, $b, self = this, $iter = TMP_8.$$p, block = $iter || nil;

        TMP_8.$$p = null;
        return ($a = ($b = self.$class().$adapter()).$create_record, $a.$$p = block.$to_proc(), $a).call($b, self);
      };

      def.$update = TMP_9 = function(attributes) {
        var $a, $b, self = this, $iter = TMP_9.$$p, block = $iter || nil;

        if (attributes == null) {
          attributes = nil
        }
        TMP_9.$$p = null;
        if (attributes !== false && attributes !== nil) {
          (($a = [attributes]), $b = self, $b['$attributes='].apply($b, $a), $a[$a.length-1])};
        return ($a = ($b = self.$class().$adapter()).$update_record, $a.$$p = block.$to_proc(), $a).call($b, self);
      };

      def.$destroy = TMP_10 = function() {
        var $a, $b, self = this, $iter = TMP_10.$$p, block = $iter || nil;

        TMP_10.$$p = null;
        return ($a = ($b = self.$class().$adapter()).$delete_record, $a.$$p = block.$to_proc(), $a).call($b, self);
      };

      def.$did_destroy = function() {
        var self = this;

        self.destroyed = true;
        self.$class().$identity_map().$delete(self.$id());
        self.$class().$all().$delete(self);
        return self.$trigger_events("destroy");
      };

      def.$did_create = function() {
        var self = this;

        self.new_record = false;
        self.$class().$identity_map()['$[]='](self.$id(), self);
        self.$class().$all().$push(self);
        return self.$trigger_events("create");
      };

      def.$did_update = function() {
        var self = this;

        return self.$trigger_events("update");
      };

      def['$[]'] = function(attribute) {
        var self = this;

        return self.$instance_variable_get("@" + (attribute));
      };

      def['$[]='] = function(attribute, value) {
        var self = this;

        return self.$instance_variable_set("@" + (attribute), value);
      };

      def['$attributes='] = function(attributes) {
        var $a, $b, TMP_11, self = this;

        return ($a = ($b = attributes).$each, $a.$$p = (TMP_11 = function(name, value){var self = TMP_11.$$s || this, $a, setter = nil;
if (name == null) name = nil;if (value == null) value = nil;
        setter = "" + (name) + "=";
          if ((($a = self['$respond_to?'](setter)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$__send__(setter, value)
            } else {
            return self.$instance_variable_set("@" + (name), value)
          };}, TMP_11.$$s = self, TMP_11), $a).call($b);
      };

      return (def.$initialize = function(attributes) {
        var $a, $b, self = this;

        if (attributes == null) {
          attributes = nil
        }
        self.attributes = $hash2([], {});
        self.new_record = true;
        self.loaded = false;
        if (attributes !== false && attributes !== nil) {
          return (($a = [attributes]), $b = self, $b['$attributes='].apply($b, $a), $a[$a.length-1])
          } else {
          return nil
        };
      }, nil) && 'initialize';
    })(self, null)
  })(self);
})(Opal);
