/* Generated by Opal 0.8.1 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$attr_writer', '$respond_to?', '$==', '$content', '$__send__', '$to_proc', '$each', '$size']);
  self.$require("vienna/observable_array");
  return (function($base) {
    var self = $module($base, 'Vienna');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $RecordArray(){};
      var self = $RecordArray = $klass($base, $super, 'RecordArray', $RecordArray);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

      def.content = nil;
      self.$include($scope.get('ObservableArray'));

      self.$attr_writer("content");

      def['$=='] = function(arr) {
        var $a, self = this;

        if ((($a = arr['$respond_to?']("content")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.content['$=='](arr.$content())
          } else {
          return self.content['$=='](arr)
        };
      };

      def.$method_missing = TMP_1 = function(sym, args) {
        var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

        args = $slice.call(arguments, 1);
        TMP_1.$$p = null;
        return ($a = ($b = self.content).$__send__, $a.$$p = block.$to_proc(), $a).apply($b, [sym].concat(args));
      };

      def.$each = TMP_2 = function() {
        var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil;

        TMP_2.$$p = null;
        return ($a = ($b = self.content).$each, $a.$$p = block.$to_proc(), $a).call($b);
      };

      def.$size = function() {
        var self = this;

        return self.content.$size();
      };

      return Opal.defn(self, '$length', def.$size);
    })(self, null)
  })(self);
})(Opal);
