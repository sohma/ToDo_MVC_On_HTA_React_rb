/* Generated by Opal 0.8.1 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_accessor', '$implement', '$raise']);
  return (function($base) {
    var self = $module($base, 'Vienna');

    var def = self.$$proto, $scope = self.$$scope;

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      return self.$attr_accessor("adapter")
    })(self.$singleton_class());

    (function($base, $super) {
      function $Adapter(){};
      var self = $Adapter = $klass($base, $super, 'Adapter', $Adapter);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

      def.$find = TMP_1 = function(record, id) {
        var self = this, $iter = TMP_1.$$p, block = $iter || nil;

        TMP_1.$$p = null;
        return self.$implement("find");
      };

      def.$load = TMP_2 = function(record, id) {
        var self = this, $iter = TMP_2.$$p, block = $iter || nil;

        TMP_2.$$p = null;
        return self.$implement("load");
      };

      def.$create_record = function(record) {
        var self = this;

        return self.$implement("create_record");
      };

      def.$update_record = function(record) {
        var self = this;

        return self.$implement("update_record");
      };

      def.$save_record = function(record) {
        var self = this;

        return self.$implement("save_record");
      };

      def.$delete_record = function(record) {
        var self = this;

        return self.$implement("delete_record");
      };

      def.$fetch = function() {
        var self = this;

        return self.$implement("fetch");
      };

      return (def.$implement = function(method) {
        var self = this;

        return self.$raise($scope.get('NoMethodError'), "Adapter subclass should implement `" + (method) + "'");
      }, nil) && 'implement';
    })(self, null);
  })(self)
})(Opal);
