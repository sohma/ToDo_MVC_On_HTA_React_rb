/* Generated by Opal 0.7.2 */
Opal.modules["native"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $range = Opal.range, $hash2 = Opal.hash2, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$try_convert', '$native?', '$respond_to?', '$to_n', '$raise', '$inspect', '$Native', '$end_with?', '$define_method', '$[]', '$convert', '$call', '$to_proc', '$new', '$each', '$native_reader', '$native_writer', '$extend', '$to_a', '$to_ary', '$include', '$method_missing', '$bind', '$instance_method', '$[]=', '$slice', '$-', '$length', '$enum_for', '$===', '$>=', '$<<', '$==', '$instance_variable_set', '$members', '$each_with_index', '$each_pair', '$name', '$native_module']);
  (function($base) {
    var self = $module($base, 'Native');

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.defs(self, '$is_a?', function(object, klass) {
      var self = this;

      
      try {
        return object instanceof self.$try_convert(klass);
      }
      catch (e) {
        return false;
      }
    ;
    });

    Opal.defs(self, '$try_convert', function(value) {
      var self = this;

      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        return nil;
      }
    ;
    });

    Opal.defs(self, '$convert', function(value) {
      var self = this;

      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        self.$raise($scope.get('ArgumentError'), "" + (value.$inspect()) + " isn't native");
      }
    ;
    });

    Opal.defs(self, '$call', TMP_1 = function(obj, key, args) {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil;

      args = $slice.call(arguments, 2);
      TMP_1.$$p = null;
      
      var prop = obj[key];

      if (prop instanceof Function) {
        var converted = new Array(args.length);

        for (var i = 0, length = args.length; i < length; i++) {
          var item = args[i],
              conv = self.$try_convert(item);

          converted[i] = conv === nil ? item : conv;
        }

        if (block !== nil) {
          converted.push(block);
        }

        return self.$Native(prop.apply(obj, converted));
      }
      else {
        return self.$Native(prop);
      }
    ;
    });

    (function($base) {
      var self = $module($base, 'Helpers');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defn(self, '$alias_native', function(new$, old, options) {
        var $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, self = this, as = nil;

        if (old == null) {
          old = new$
        }
        if (options == null) {
          options = $hash2([], {})
        }
        if ((($a = old['$end_with?']("=")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = self).$define_method, $a.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (value == null) value = nil;
          self["native"][old['$[]']($range(0, -2, false))] = $scope.get('Native').$convert(value);
            return value;}, TMP_2.$$s = self, TMP_2), $a).call($b, new$)
        } else if ((($a = as = options['$[]']("as")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($c = self).$define_method, $a.$$p = (TMP_3 = function(args){var self = TMP_3.$$s || this, block, $a, $b, $c;
            if (self["native"] == null) self["native"] = nil;
args = $slice.call(arguments, 0);
            block = TMP_3.$$p || nil, TMP_3.$$p = null;
          if ((($a = value = ($b = ($c = $scope.get('Native')).$call, $b.$$p = block.$to_proc(), $b).apply($c, [self["native"], old].concat(args))) !== nil && (!$a.$$is_boolean || $a == true))) {
              return as.$new(value.$to_n())
              } else {
              return nil
            }}, TMP_3.$$s = self, TMP_3), $a).call($c, new$)
          } else {
          return ($a = ($d = self).$define_method, $a.$$p = (TMP_4 = function(args){var self = TMP_4.$$s || this, block, $a, $b;
            if (self["native"] == null) self["native"] = nil;
args = $slice.call(arguments, 0);
            block = TMP_4.$$p || nil, TMP_4.$$p = null;
          return ($a = ($b = $scope.get('Native')).$call, $a.$$p = block.$to_proc(), $a).apply($b, [self["native"], old].concat(args))}, TMP_4.$$s = self, TMP_4), $a).call($d, new$)
        };
      });

      Opal.defn(self, '$native_reader', function(names) {
        var $a, $b, TMP_5, self = this;

        names = $slice.call(arguments, 0);
        return ($a = ($b = names).$each, $a.$$p = (TMP_5 = function(name){var self = TMP_5.$$s || this, $a, $b, TMP_6;
if (name == null) name = nil;
        return ($a = ($b = self).$define_method, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;
            if (self["native"] == null) self["native"] = nil;

          return self.$Native(self["native"][name])}, TMP_6.$$s = self, TMP_6), $a).call($b, name)}, TMP_5.$$s = self, TMP_5), $a).call($b);
      });

      Opal.defn(self, '$native_writer', function(names) {
        var $a, $b, TMP_7, self = this;

        names = $slice.call(arguments, 0);
        return ($a = ($b = names).$each, $a.$$p = (TMP_7 = function(name){var self = TMP_7.$$s || this, $a, $b, TMP_8;
if (name == null) name = nil;
        return ($a = ($b = self).$define_method, $a.$$p = (TMP_8 = function(value){var self = TMP_8.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (value == null) value = nil;
          return self.$Native(self["native"][name] = value)}, TMP_8.$$s = self, TMP_8), $a).call($b, "" + (name) + "=")}, TMP_7.$$s = self, TMP_7), $a).call($b);
      });

      Opal.defn(self, '$native_accessor', function(names) {
        var $a, $b, self = this;

        names = $slice.call(arguments, 0);
        ($a = self).$native_reader.apply($a, [].concat(names));
        return ($b = self).$native_writer.apply($b, [].concat(names));
      });
    })(self);

    Opal.defs(self, '$included', function(klass) {
      var self = this;

      return klass.$extend($scope.get('Helpers'));
    });

    Opal.defn(self, '$initialize', function(native$) {
      var $a, self = this;

      if ((($a = $scope.get('Kernel')['$native?'](native$)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        $scope.get('Kernel').$raise($scope.get('ArgumentError'), "" + (native$.$inspect()) + " isn't native")
      };
      return self["native"] = native$;
    });

    Opal.defn(self, '$to_n', function() {
      var self = this;
      if (self["native"] == null) self["native"] = nil;

      return self["native"];
    });
  })(self);
  (function($base) {
    var self = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_9;

    Opal.defn(self, '$native?', function(value) {
      var self = this;

      return value == null || !value.$$class;
    });

    Opal.defn(self, '$Native', function(obj) {
      var $a, self = this;

      if ((($a = obj == null) !== nil && (!$a.$$is_boolean || $a == true))) {
        return nil
      } else if ((($a = self['$native?'](obj)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return (($scope.get('Native')).$$scope.get('Object')).$new(obj)
        } else {
        return obj
      };
    });

    Opal.defn(self, '$Array', TMP_9 = function(object, args) {
      var $a, $b, self = this, $iter = TMP_9.$$p, block = $iter || nil;

      args = $slice.call(arguments, 1);
      TMP_9.$$p = null;
      
      if (object == null || object === nil) {
        return [];
      }
      else if (self['$native?'](object)) {
        return ($a = ($b = (($scope.get('Native')).$$scope.get('Array'))).$new, $a.$$p = block.$to_proc(), $a).apply($b, [object].concat(args)).$to_a();
      }
      else if (object['$respond_to?']("to_ary")) {
        return object.$to_ary();
      }
      else if (object['$respond_to?']("to_a")) {
        return object.$to_a();
      }
      else {
        return [object];
      }
    ;
    });
  })(self);
  (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope, TMP_10, TMP_11, TMP_12;

    def["native"] = nil;
    self.$include(Opal.get('Native'));

    Opal.defn(self, '$==', function(other) {
      var self = this;

      return self["native"] === $scope.get('Native').$try_convert(other);
    });

    Opal.defn(self, '$has_key?', function(name) {
      var self = this;

      return Opal.hasOwnProperty.call(self["native"], name);
    });

    Opal.defn(self, '$key?', def['$has_key?']);

    Opal.defn(self, '$include?', def['$has_key?']);

    Opal.defn(self, '$member?', def['$has_key?']);

    Opal.defn(self, '$each', TMP_10 = function(args) {
      var $a, self = this, $iter = TMP_10.$$p, $yield = $iter || nil;

      args = $slice.call(arguments, 0);
      TMP_10.$$p = null;
      if (($yield !== nil)) {
        
        for (var key in self["native"]) {
          ((($a = Opal.yieldX($yield, [key, self["native"][key]])) === $breaker) ? $breaker.$v : $a)
        }
      ;
        return self;
        } else {
        return ($a = self).$method_missing.apply($a, ["each"].concat(args))
      };
    });

    Opal.defn(self, '$[]', function(key) {
      var self = this;

      
      var prop = self["native"][key];

      if (prop instanceof Function) {
        return prop;
      }
      else {
        return Opal.get('Native').$call(self["native"], key)
      }
    ;
    });

    Opal.defn(self, '$[]=', function(key, value) {
      var $a, self = this, native$ = nil;

      native$ = $scope.get('Native').$try_convert(value);
      if ((($a = native$ === nil) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self["native"][key] = value;
        } else {
        return self["native"][key] = native$;
      };
    });

    Opal.defn(self, '$merge!', function(other) {
      var self = this;

      
      var other = $scope.get('Native').$convert(other);

      for (var prop in other) {
        self["native"][prop] = other[prop];
      }
    ;
      return self;
    });

    Opal.defn(self, '$respond_to?', function(name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false
      }
      return $scope.get('Kernel').$instance_method("respond_to?").$bind(self).$call(name, include_all);
    });

    Opal.defn(self, '$respond_to_missing?', function(name) {
      var self = this;

      return Opal.hasOwnProperty.call(self["native"], name);
    });

    Opal.defn(self, '$method_missing', TMP_11 = function(mid, args) {
      var $a, $b, self = this, $iter = TMP_11.$$p, block = $iter || nil;

      args = $slice.call(arguments, 1);
      TMP_11.$$p = null;
      
      if (mid.charAt(mid.length - 1) === '=') {
        return self['$[]='](mid.$slice(0, mid.$length()['$-'](1)), args['$[]'](0));
      }
      else {
        return ($a = ($b = Opal.get('Native')).$call, $a.$$p = block.$to_proc(), $a).apply($b, [self["native"], mid].concat(args));
      }
    ;
    });

    Opal.defn(self, '$nil?', function() {
      var self = this;

      return false;
    });

    Opal.defn(self, '$is_a?', function(klass) {
      var self = this;

      return Opal.is_a(self, klass);
    });

    Opal.defn(self, '$kind_of?', def['$is_a?']);

    Opal.defn(self, '$instance_of?', function(klass) {
      var self = this;

      return self.$$class === klass;
    });

    Opal.defn(self, '$class', function() {
      var self = this;

      return self.$$class;
    });

    Opal.defn(self, '$to_a', TMP_12 = function(options) {
      var $a, $b, self = this, $iter = TMP_12.$$p, block = $iter || nil;

      if (options == null) {
        options = $hash2([], {})
      }
      TMP_12.$$p = null;
      return ($a = ($b = (($scope.get('Native')).$$scope.get('Array'))).$new, $a.$$p = block.$to_proc(), $a).call($b, self["native"], options).$to_a();
    });

    return (Opal.defn(self, '$inspect', function() {
      var self = this;

      return "#<Native:" + (String(self["native"])) + ">";
    }), nil) && 'inspect';
  })($scope.get('Native'), $scope.get('BasicObject'));
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, TMP_13, TMP_14;

    def.named = def["native"] = def.get = def.block = def.set = def.length = nil;
    self.$include($scope.get('Native'));

    self.$include($scope.get('Enumerable'));

    def.$initialize = TMP_13 = function(native$, options) {
      var $a, self = this, $iter = TMP_13.$$p, block = $iter || nil;

      if (options == null) {
        options = $hash2([], {})
      }
      TMP_13.$$p = null;
      Opal.find_super_dispatcher(self, 'initialize', TMP_13, null).apply(self, [native$]);
      self.get = ((($a = options['$[]']("get")) !== false && $a !== nil) ? $a : options['$[]']("access"));
      self.named = options['$[]']("named");
      self.set = ((($a = options['$[]']("set")) !== false && $a !== nil) ? $a : options['$[]']("access"));
      self.length = ((($a = options['$[]']("length")) !== false && $a !== nil) ? $a : "length");
      self.block = block;
      if ((($a = self.$length() == null) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('ArgumentError'), "no length found on the array-like object")
        } else {
        return nil
      };
    };

    def.$each = TMP_14 = function() {
      var self = this, $iter = TMP_14.$$p, block = $iter || nil;

      TMP_14.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("each")
      };
      
      for (var i = 0, length = self.$length(); i < length; i++) {
        var value = Opal.yield1(block, self['$[]'](i));

        if (value === $breaker) {
          return $breaker.$v;
        }
      }
    ;
      return self;
    };

    def['$[]'] = function(index) {
      var $a, self = this, result = nil, $case = nil;

      result = (function() {$case = index;if ($scope.get('String')['$===']($case) || $scope.get('Symbol')['$===']($case)) {if ((($a = self.named) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self["native"][self.named](index);
        } else {
        return self["native"][index];
      }}else if ($scope.get('Integer')['$===']($case)) {if ((($a = self.get) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self["native"][self.get](index);
        } else {
        return self["native"][index];
      }}else { return nil }})();
      if (result !== false && result !== nil) {
        if ((($a = self.block) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.block.$call(result)
          } else {
          return self.$Native(result)
        }
        } else {
        return nil
      };
    };

    def['$[]='] = function(index, value) {
      var $a, self = this;

      if ((($a = self.set) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self["native"][self.set](index, $scope.get('Native').$convert(value));
        } else {
        return self["native"][index] = $scope.get('Native').$convert(value);
      };
    };

    def.$last = function(count) {
      var $a, self = this, index = nil, result = nil;

      if (count == null) {
        count = nil
      }
      if (count !== false && count !== nil) {
        index = self.$length()['$-'](1);
        result = [];
        while (index['$>='](0)) {
        result['$<<'](self['$[]'](index));
        index = index['$-'](1);};
        return result;
        } else {
        return self['$[]'](self.$length()['$-'](1))
      };
    };

    def.$length = function() {
      var self = this;

      return self["native"][self.length];
    };

    Opal.defn(self, '$to_ary', def.$to_a);

    return (def.$inspect = function() {
      var self = this;

      return self.$to_a().$inspect();
    }, nil) && 'inspect';
  })($scope.get('Native'), null);
  (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_n = function() {
      var self = this;

      return self.valueOf();
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_n = function() {
      var self = this;

      return self;
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_n = function() {
      var self = this;

      return self.valueOf();
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $Regexp(){};
    var self = $Regexp = $klass($base, $super, 'Regexp', $Regexp);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_n = function() {
      var self = this;

      return self.valueOf();
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $MatchData(){};
    var self = $MatchData = $klass($base, $super, 'MatchData', $MatchData);

    var def = self.$$proto, $scope = self.$$scope;

    def.matches = nil;
    return (def.$to_n = function() {
      var self = this;

      return self.matches;
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $Struct(){};
    var self = $Struct = $klass($base, $super, 'Struct', $Struct);

    var def = self.$$proto, $scope = self.$$scope;

    def.$initialize = function(args) {
      var $a, $b, TMP_15, $c, TMP_16, self = this, object = nil;

      args = $slice.call(arguments, 0);
      if ((($a = (($b = args.$length()['$=='](1)) ? self['$native?'](args['$[]'](0)) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        object = args['$[]'](0);
        return ($a = ($b = self.$members()).$each, $a.$$p = (TMP_15 = function(name){var self = TMP_15.$$s || this;
if (name == null) name = nil;
        return self.$instance_variable_set("@" + (name), self.$Native(object[name]))}, TMP_15.$$s = self, TMP_15), $a).call($b);
        } else {
        return ($a = ($c = self.$members()).$each_with_index, $a.$$p = (TMP_16 = function(name, index){var self = TMP_16.$$s || this;
if (name == null) name = nil;if (index == null) index = nil;
        return self.$instance_variable_set("@" + (name), args['$[]'](index))}, TMP_16.$$s = self, TMP_16), $a).call($c)
      };
    };

    return (def.$to_n = function() {
      var $a, $b, TMP_17, self = this, result = nil;

      result = {};
      ($a = ($b = self).$each_pair, $a.$$p = (TMP_17 = function(name, value){var self = TMP_17.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return result[name] = value.$to_n();}, TMP_17.$$s = self, TMP_17), $a).call($b);
      return result;
    }, nil) && 'to_n';
  })(self, null);
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_n = function() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var obj = self[i];

        if ((obj)['$respond_to?']("to_n")) {
          result.push((obj).$to_n());
        }
        else {
          result.push(obj);
        }
      }

      return result;
    ;
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_n = function() {
      var self = this;

      return self.valueOf();
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_n = function() {
      var self = this;

      return self;
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_n = function() {
      var self = this;

      return null;
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, TMP_18;

    def.$initialize = TMP_18 = function(defaults) {
      var self = this, $iter = TMP_18.$$p, block = $iter || nil;

      TMP_18.$$p = null;
      
      if (defaults != null) {
        if (defaults.constructor === Object) {
          var _map = self.map,
              smap = self.smap,
              keys = self.keys,
              map, khash, value;

          for (var key in defaults) {
            value = defaults[key];

            if (key.$$is_string) {
              map = smap;
              khash = key;
            } else {
              map = _map;
              khash = key.$hash();
            }

            if (value && value.constructor === Object) {
              map[khash] = $scope.get('Hash').$new(value);
            }
            else {
              map[khash] = self.$Native(value);
            }

            keys.push(key);
          }
        }
        else {
          self.none = defaults;
        }
      }
      else if (block !== nil) {
        self.proc = block;
      }

      return self;
    
    };

    return (def.$to_n = function() {
      var self = this;

      
      var result = {},
          keys   = self.keys,
          _map   = self.map,
          smap   = self.smap,
          map, khash, value;

      for (var i = 0, length = keys.length; i < length; i++) {
        key   = keys[i];

        if (key.$$is_string) {
          map = smap;
          khash = key;
        } else {
          map = _map;
          khash = key.$hash();
        }

        value = map[khash];

        if ((value)['$respond_to?']("to_n")) {
          result[key] = (value).$to_n();
        }
        else {
          result[key] = value;
        }
      }

      return result;
    ;
    }, nil) && 'to_n';
  })(self, null);
  (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$native_module = function() {
      var self = this;

      return Opal.global[self.$name()] = self;
    }, nil) && 'native_module'
  })(self, null);
  (function($base, $super) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.$$proto, $scope = self.$$scope;

    def.$native_alias = function(new_jsid, existing_mid) {
      var self = this;

      
      var aliased = self.$$proto['$' + existing_mid];
      if (!aliased) {
        self.$raise($scope.get('NameError'), "undefined method `" + (existing_mid) + "' for class `" + (self.$inspect()) + "'");
      }
      self.$$proto[new_jsid] = aliased;
    ;
    };

    return (def.$native_class = function() {
      var self = this;

      self.$native_module();
      self.new = self.$new;
    }, nil) && 'native_class';
  })(self, null);
  return $gvars.$ = $gvars.global = self.$Native(Opal.global);
};

/* Generated by Opal 0.7.2 */
Opal.modules["active_support/core_ext/array/extract_options"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$instance_of?', '$is_a?', '$last', '$extractable_options?', '$pop']);
  (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope;

    return (def['$extractable_options?'] = function() {
      var self = this;

      return self['$instance_of?']($scope.get('Hash'));
    }, nil) && 'extractable_options?'
  })(self, null);
  return (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope;

    return (def['$extract_options!'] = function() {
      var $a, $b, self = this;

      if ((($a = ($b = self.$last()['$is_a?']($scope.get('Hash')), $b !== false && $b !== nil ?self.$last()['$extractable_options?']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$pop()
        } else {
        return $hash2([], {})
      };
    }, nil) && 'extract_options!'
  })(self, null);
};

/* Generated by Opal 0.7.2 */
Opal.modules["active_support/core_ext/array"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  return self.$require("active_support/core_ext/array/extract_options")
};

/* Generated by Opal 0.7.2 */
Opal.modules["active_support/core_ext/kernel/singleton_class"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$class_eval', '$to_proc', '$singleton_class']);
  return (function($base) {
    var self = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.defn(self, '$class_eval', TMP_1 = function(args) {
      var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

      args = $slice.call(arguments, 0);
      TMP_1.$$p = null;
      return ($a = ($b = self.$singleton_class()).$class_eval, $a.$$p = block.$to_proc(), $a).apply($b, [].concat(args));
    })
  })(self)
};

/* Generated by Opal 0.7.2 */
Opal.modules["active_support/core_ext/module/remove_method"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$method_defined?', '$private_method_defined?', '$undef_method', '$remove_possible_method', '$define_method', '$to_proc']);
  return (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    def.$remove_possible_method = function(method) {
      var $a, $b, self = this;

      if ((($a = ((($b = self['$method_defined?'](method)) !== false && $b !== nil) ? $b : self['$private_method_defined?'](method))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$undef_method(method)
        } else {
        return nil
      };
    };

    return (def.$redefine_method = TMP_1 = function(method) {
      var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

      TMP_1.$$p = null;
      self.$remove_possible_method(method);
      return ($a = ($b = self).$define_method, $a.$$p = block.$to_proc(), $a).call($b, method);
    }, nil) && 'redefine_method';
  })(self, null)
};

/* Generated by Opal 0.7.2 */
Opal.modules["active_support/core_ext/class/attribute"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$extract_options!', '$fetch', '$each', '$define_singleton_method', '$!', '$public_send', '$class_eval', '$remove_possible_method', '$define_method', '$singleton_class', '$singleton_class?', '$instance_variable_defined?', '$instance_variable_get', '$send', '$class', '$attr_writer', '$private', '$respond_to?', '$==', '$first', '$ancestors']);
  self.$require("active_support/core_ext/kernel/singleton_class");
  self.$require("active_support/core_ext/module/remove_method");
  self.$require("active_support/core_ext/array/extract_options");
  return (function($base, $super) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.$$proto, $scope = self.$$scope, $a;

    def.$class_attribute = function(attrs) {
      var $a, $b, TMP_1, self = this, options = nil, instance_reader = nil, instance_writer = nil, instance_predicate = nil;

      attrs = $slice.call(arguments, 0);
      options = attrs['$extract_options!']();
      instance_reader = ($a = options.$fetch("instance_accessor", true), $a !== false && $a !== nil ?options.$fetch("instance_reader", true) : $a);
      instance_writer = ($a = options.$fetch("instance_accessor", true), $a !== false && $a !== nil ?options.$fetch("instance_writer", true) : $a);
      instance_predicate = options.$fetch("instance_predicate", true);
      return ($a = ($b = attrs).$each, $a.$$p = (TMP_1 = function(name){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, $e, TMP_9, $f, TMP_10, ivar = nil;
if (name == null) name = nil;
      ($a = ($b = self).$define_singleton_method, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

        return nil}, TMP_2.$$s = self, TMP_2), $a).call($b, name);
        if (instance_predicate !== false && instance_predicate !== nil) {
          ($a = ($c = self).$define_singleton_method, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

          return self.$public_send(name)['$!']()['$!']()}, TMP_3.$$s = self, TMP_3), $a).call($c, "" + (name) + "?")};
        ivar = "@" + (name);
        ($a = ($d = self).$define_singleton_method, $a.$$p = (TMP_4 = function(val){var self = TMP_4.$$s || this, $a, $b, TMP_5, $c, TMP_7;
if (val == null) val = nil;
        ($a = ($b = self.$singleton_class()).$class_eval, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $a, $b, TMP_6;

          self.$remove_possible_method(name);
            return ($a = ($b = self).$define_method, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

            return val}, TMP_6.$$s = self, TMP_6), $a).call($b, name);}, TMP_5.$$s = self, TMP_5), $a).call($b);
          if ((($a = self['$singleton_class?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            ($a = ($c = self).$class_eval, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $a, $b, TMP_8;

            self.$remove_possible_method(name);
              return ($a = ($b = self).$define_method, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $a;

              if ((($a = self['$instance_variable_defined?'](ivar)) !== nil && (!$a.$$is_boolean || $a == true))) {
                  return self.$instance_variable_get(ivar)
                  } else {
                  return self.$singleton_class().$send(name)
                }}, TMP_8.$$s = self, TMP_8), $a).call($b, name);}, TMP_7.$$s = self, TMP_7), $a).call($c)};
          return val;}, TMP_4.$$s = self, TMP_4), $a).call($d, "" + (name) + "=");
        if (instance_reader !== false && instance_reader !== nil) {
          self.$remove_possible_method(name);
          ($a = ($e = self).$define_method, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this, $a;

          if ((($a = self['$instance_variable_defined?'](ivar)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.$instance_variable_get(ivar)
              } else {
              return self.$class().$public_send(name)
            }}, TMP_9.$$s = self, TMP_9), $a).call($e, name);
          if (instance_predicate !== false && instance_predicate !== nil) {
            ($a = ($f = self).$define_method, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

            return self.$public_send(name)['$!']()['$!']()}, TMP_10.$$s = self, TMP_10), $a).call($f, "" + (name) + "?")};};
        if (instance_writer !== false && instance_writer !== nil) {
          return self.$attr_writer(name)
          } else {
          return nil
        };}, TMP_1.$$s = self, TMP_1), $a).call($b);
    };

    self.$private();

    if ((($a = self['$respond_to?']("singleton_class?")) !== nil && (!$a.$$is_boolean || $a == true))) {
      return nil
      } else {
      return (def['$singleton_class?'] = function() {
        var $a, self = this;

        return ((($a = true) !== false && $a !== nil) ? $a : self.$ancestors().$first()['$=='](self)['$!']());
      }, nil) && 'singleton_class?'
    };
  })(self, null);
};

/* Generated by Opal 0.7.2 */
Opal.modules["active_support/core_ext/class"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  return self.$require("active_support/core_ext/class/attribute")
};

/* Generated by Opal 0.7.2 */
Opal.modules["active_support/core_ext/enumerable"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$enum_for', '$new', '$destructure', '$[]=']);
  return (function($base) {
    var self = $module($base, 'Enumerable');

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.defn(self, '$index_by', TMP_1 = function() {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil, hash = nil;

      TMP_1.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("index_by")
      };
      hash = $scope.get('Hash').$new();
      
      var result;

      self.$each._p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = $opal.$yield1(block, param);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        hash['$[]='](value, param);
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }
    
      return hash;
    })
  })(self)
};

/* Generated by Opal 0.7.2 */
Opal.modules["active_support/hash_with_indifferent_access"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$dup', '$respond_to?', '$update', '$to_hash', '$tap', '$default=', '$default', '$default_proc', '$default_proc=', '$new']);
  return (function($base) {
    var self = $module($base, 'ActiveSupport');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $HashWithIndifferentAccess(){};
      var self = $HashWithIndifferentAccess = $klass($base, $super, 'HashWithIndifferentAccess', $HashWithIndifferentAccess);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      def['$extractable_options?'] = function() {
        var self = this;

        return true;
      };

      def.$with_indifferent_access = function() {
        var self = this;

        return self.$dup();
      };

      def.$nested_under_indifferent_access = function() {
        var self = this;

        return self;
      };

      def.$initialize = TMP_1 = function(constructor) {
        var $a, self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

        if (constructor == null) {
          constructor = $hash2([], {})
        }
        TMP_1.$$p = null;
        if ((($a = constructor['$respond_to?']("to_hash")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, []);
          return self.$update(constructor);
          } else {
          return Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [constructor])
        };
      };

      return (Opal.defs(self, '$new_from_hash_copying_default', function(hash) {
        var $a, $b, TMP_2, self = this;

        hash = hash.$to_hash();
        return ($a = ($b = self.$new(hash)).$tap, $a.$$p = (TMP_2 = function(new_hash){var self = TMP_2.$$s || this, $a, $b;
if (new_hash == null) new_hash = nil;
        (($a = [hash.$default()]), $b = new_hash, $b['$default='].apply($b, $a), $a[$a.length-1]);
          if ((($a = hash.$default_proc()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return (($a = [hash.$default_proc()]), $b = new_hash, $b['$default_proc='].apply($b, $a), $a[$a.length-1])
            } else {
            return nil
          };}, TMP_2.$$s = self, TMP_2), $a).call($b);
      }), nil) && 'new_from_hash_copying_default';
    })(self, $scope.get('Hash'))
  })(self)
};

/* Generated by Opal 0.7.2 */
Opal.modules["active_support/core_ext/hash/indifferent_access"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$new_from_hash_copying_default']);
  self.$require("active_support/hash_with_indifferent_access");
  return (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope;

    def.$with_indifferent_access = function() {
      var self = this;

      return (($scope.get('ActiveSupport')).$$scope.get('HashWithIndifferentAccess')).$new_from_hash_copying_default(self);
    };

    return Opal.defn(self, '$nested_under_indifferent_access', def.$with_indifferent_access);
  })(self, null);
};

/* Generated by Opal 0.7.2 */
Opal.modules["active_support/core_ext/hash"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  return self.$require("active_support/core_ext/hash/indifferent_access")
};

/* Generated by Opal 0.7.2 */
Opal.modules["active_support/core_ext/numeric/time"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$*', '$hours', '$days', '$weeks', '$-', '$current', '$+']);
  return (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope;

    def.$seconds = function() {
      var self = this;

      return self;
    };

    Opal.defn(self, '$second', def.$seconds);

    def.$minutes = function() {
      var self = this;

      return self['$*'](60);
    };

    Opal.defn(self, '$minute', def.$minutes);

    def.$hours = function() {
      var self = this;

      return self['$*'](3600);
    };

    Opal.defn(self, '$hour', def.$hours);

    def.$days = function() {
      var self = this;

      return self['$*']((24).$hours());
    };

    Opal.defn(self, '$day', def.$days);

    def.$weeks = function() {
      var self = this;

      return self['$*']((7).$days());
    };

    Opal.defn(self, '$week', def.$weeks);

    def.$fortnights = function() {
      var self = this;

      return self['$*']((2).$weeks());
    };

    Opal.defn(self, '$fortnight', def.$fortnights);

    def.$ago = function(time) {
      var self = this;

      if (time == null) {
        time = Opal.get('Time').$current()
      }
      return time['$-'](self);
    };

    Opal.defn(self, '$until', def.$ago);

    def.$since = function(time) {
      var self = this;

      if (time == null) {
        time = Opal.get('Time').$current()
      }
      return time['$+'](self);
    };

    return Opal.defn(self, '$from_now', def.$since);
  })(self, null)
};

/* Generated by Opal 0.7.2 */
Opal.modules["active_support/core_ext/integer/time"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$*', '$days']);
  self.$require("active_support/core_ext/numeric/time");
  return (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope;

    def.$months = function() {
      var self = this;

      return self['$*']((30).$days());
    };

    Opal.defn(self, '$month', def.$months);

    def.$years = function() {
      var self = this;

      return self['$*']((365.25).$days());
    };

    return Opal.defn(self, '$year', def.$years);
  })(self, null);
};

/* Generated by Opal 0.7.2 */
Opal.modules["active_support/core_ext/integer"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  return self.$require("active_support/core_ext/integer/time")
};

/* Generated by Opal 0.7.2 */
Opal.modules["active_support/core_ext/kernel"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  return self.$require("active_support/core_ext/kernel/singleton_class")
};

/* Generated by Opal 0.7.2 */
Opal.modules["active_support/core_ext/module"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  return self.$require("active_support/core_ext/module/remove_method")
};

/* Generated by Opal 0.7.2 */
Opal.modules["active_support/core_ext/numeric/calculations"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  return (function(self) {
    var $scope = self.$$scope, def = self.$$proto;

    return self.$$proto.$current = self.$$proto.$now
  })($scope.get('Time').$singleton_class())
};

/* Generated by Opal 0.7.2 */
Opal.modules["active_support/core_ext/numeric"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("active_support/core_ext/numeric/time");
  return self.$require("active_support/core_ext/numeric/calculations");
};

/* Generated by Opal 0.7.2 */
Opal.modules["active_support/core_ext/object/blank"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$respond_to?', '$empty?', '$!', '$blank?', '$present?', '$==', '$alias_method', '$=~']);
  (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$blank?', function() {
      var $a, self = this;

      if ((($a = self['$respond_to?']("empty?")) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self['$empty?']()
        } else {
        return self['$!']()
      };
    });

    Opal.defn(self, '$present?', function() {
      var self = this;

      return self['$blank?']()['$!']();
    });

    return (Opal.defn(self, '$presence', function() {
      var $a, self = this;

      if ((($a = self['$present?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self
        } else {
        return nil
      };
    }), nil) && 'presence';
  })(self, null);
  (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope;

    return (def['$blank?'] = function() {
      var self = this;

      return true;
    }, nil) && 'blank?'
  })(self, null);
  (function($base, $super) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $scope = self.$$scope;

    return (def['$blank?'] = function() {
      var self = this;

      return self['$=='](false);
    }, nil) && 'blank?'
  })(self, null);
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope;

    return self.$alias_method("blank?", "empty?")
  })(self, null);
  (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope;

    return self.$alias_method("blank?", "empty?")
  })(self, null);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope;

    return (def['$blank?'] = function() {
      var $a, self = this;

      return ($a = self['$=~'](/[^\s　]/), ($a === nil || $a === false));
    }, nil) && 'blank?'
  })(self, null);
  return (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope;

    return (def['$blank?'] = function() {
      var self = this;

      return false;
    }, nil) && 'blank?'
  })(self, null);
};

/* Generated by Opal 0.7.2 */
Opal.modules["active_support/core_ext/object/try"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$empty?', '$respond_to?', '$first', '$try!', '$to_proc', '$zero?', '$arity', '$instance_eval', '$public_send']);
  (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

    Opal.defn(self, '$try', TMP_1 = function(a) {
      var $a, $b, self = this, $iter = TMP_1.$$p, b = $iter || nil;

      a = $slice.call(arguments, 0);
      TMP_1.$$p = null;
      if ((($a = ((($b = a['$empty?']()) !== false && $b !== nil) ? $b : self['$respond_to?'](a.$first()))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = self)['$try!'], $a.$$p = b.$to_proc(), $a).apply($b, [].concat(a))
        } else {
        return nil
      };
    });

    return (Opal.defn(self, '$try!', TMP_2 = function(a) {
      var $a, $b, $c, self = this, $iter = TMP_2.$$p, b = $iter || nil;

      a = $slice.call(arguments, 0);
      TMP_2.$$p = null;
      if ((($a = ($b = a['$empty?'](), $b !== false && $b !== nil ?(b !== nil) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        if ((($a = b.$arity()['$zero?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = self).$instance_eval, $a.$$p = b.$to_proc(), $a).call($b)
          } else {
          return $a = Opal.yield1(b, self), $a === $breaker ? $a : $a
        }
        } else {
        return ($a = ($c = self).$public_send, $a.$$p = b.$to_proc(), $a).apply($c, [].concat(a))
      };
    }), nil) && 'try!';
  })(self, null);
  return (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope;

    def.$try = function(args) {
      var self = this;

      args = $slice.call(arguments, 0);
      return nil;
    };

    return (def['$try!'] = function(args) {
      var self = this;

      args = $slice.call(arguments, 0);
      return nil;
    }, nil) && 'try!';
  })(self, null);
};

/* Generated by Opal 0.7.2 */
Opal.modules["active_support/core_ext/object"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("active_support/core_ext/object/blank");
  return self.$require("active_support/core_ext/object/try");
};

/* Generated by Opal 0.7.2 */
Opal.modules["set"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$include', '$new', '$nil?', '$===', '$raise', '$each', '$add', '$call', '$merge', '$class', '$respond_to?', '$subtract', '$dup', '$join', '$to_a', '$equal?', '$instance_of?', '$==', '$instance_variable_get', '$is_a?', '$size', '$all?', '$include?', '$[]=', '$enum_for', '$[]', '$<<', '$replace', '$delete', '$select', '$each_key', '$to_proc', '$empty?', '$eql?', '$instance_eval', '$clear', '$keys']);
  (function($base, $super) {
    function $Set(){};
    var self = $Set = $klass($base, $super, 'Set', $Set);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_4, TMP_7, TMP_9, TMP_12;

    def.hash = nil;
    self.$include($scope.get('Enumerable'));

    Opal.defs(self, '$[]', function(ary) {
      var self = this;

      ary = $slice.call(arguments, 0);
      return self.$new(ary);
    });

    def.$initialize = TMP_1 = function(enum$) {
      var $a, $b, TMP_2, self = this, $iter = TMP_1.$$p, block = $iter || nil;

      if (enum$ == null) {
        enum$ = nil
      }
      TMP_1.$$p = null;
      self.hash = $scope.get('Hash').$new();
      if ((($a = enum$['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return nil};
      if ((($a = $scope.get('Enumerable')['$==='](enum$)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "value must be enumerable")
      };
      if (block !== false && block !== nil) {
        return ($a = ($b = enum$).$each, $a.$$p = (TMP_2 = function(item){var self = TMP_2.$$s || this;
if (item == null) item = nil;
        return self.$add(block.$call(item))}, TMP_2.$$s = self, TMP_2), $a).call($b)
        } else {
        return self.$merge(enum$)
      };
    };

    def.$dup = function() {
      var self = this, result = nil;

      result = self.$class().$new();
      return result.$merge(self);
    };

    def['$-'] = function(enum$) {
      var $a, self = this;

      if ((($a = enum$['$respond_to?']("each")) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$subtract(enum$);
    };

    Opal.defn(self, '$difference', def['$-']);

    def.$inspect = function() {
      var self = this;

      return "#<Set: {" + (self.$to_a().$join(",")) + "}>";
    };

    def['$=='] = function(other) {
      var $a, $b, TMP_3, self = this;

      if ((($a = self['$equal?'](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return true
      } else if ((($a = other['$instance_of?'](self.$class())) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.hash['$=='](other.$instance_variable_get("@hash"))
      } else if ((($a = ($b = other['$is_a?']($scope.get('Set')), $b !== false && $b !== nil ?self.$size()['$=='](other.$size()) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = other)['$all?'], $a.$$p = (TMP_3 = function(o){var self = TMP_3.$$s || this;
          if (self.hash == null) self.hash = nil;
if (o == null) o = nil;
        return self.hash['$include?'](o)}, TMP_3.$$s = self, TMP_3), $a).call($b)
        } else {
        return false
      };
    };

    def.$add = function(o) {
      var self = this;

      self.hash['$[]='](o, true);
      return self;
    };

    Opal.defn(self, '$<<', def.$add);

    def.$classify = TMP_4 = function() {
      var $a, $b, TMP_5, $c, TMP_6, self = this, $iter = TMP_4.$$p, block = $iter || nil, result = nil;

      TMP_4.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("classify")
      };
      result = ($a = ($b = $scope.get('Hash')).$new, $a.$$p = (TMP_5 = function(h, k){var self = TMP_5.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
      return h['$[]='](k, self.$class().$new())}, TMP_5.$$s = self, TMP_5), $a).call($b);
      ($a = ($c = self).$each, $a.$$p = (TMP_6 = function(item){var self = TMP_6.$$s || this, $a;
if (item == null) item = nil;
      return result['$[]'](((($a = Opal.yield1(block, item)) === $breaker) ? $breaker.$v : $a)).$add(item)}, TMP_6.$$s = self, TMP_6), $a).call($c);
      return result;
    };

    def['$collect!'] = TMP_7 = function() {
      var $a, $b, TMP_8, self = this, $iter = TMP_7.$$p, block = $iter || nil, result = nil;

      TMP_7.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("collect!")
      };
      result = self.$class().$new();
      ($a = ($b = self).$each, $a.$$p = (TMP_8 = function(item){var self = TMP_8.$$s || this, $a;
if (item == null) item = nil;
      return result['$<<'](((($a = Opal.yield1(block, item)) === $breaker) ? $breaker.$v : $a))}, TMP_8.$$s = self, TMP_8), $a).call($b);
      return self.$replace(result);
    };

    Opal.defn(self, '$map!', def['$collect!']);

    def.$delete = function(o) {
      var self = this;

      self.hash.$delete(o);
      return self;
    };

    def['$delete?'] = function(o) {
      var $a, self = this;

      if ((($a = self['$include?'](o)) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$delete(o);
        return self;
        } else {
        return nil
      };
    };

    def.$delete_if = TMP_9 = function() {try {

      var $a, $b, TMP_10, $c, $d, TMP_11, self = this, $iter = TMP_9.$$p, $yield = $iter || nil;

      TMP_9.$$p = null;
      ((($a = ($yield !== nil)) !== false && $a !== nil) ? $a : Opal.ret(self.$enum_for("delete_if")));
      ($a = ($b = ($c = ($d = self).$select, $c.$$p = (TMP_11 = function(o){var self = TMP_11.$$s || this, $a;
if (o == null) o = nil;
      return $a = Opal.yield1($yield, o), $a === $breaker ? $a : $a}, TMP_11.$$s = self, TMP_11), $c).call($d)).$each, $a.$$p = (TMP_10 = function(o){var self = TMP_10.$$s || this;
        if (self.hash == null) self.hash = nil;
if (o == null) o = nil;
      return self.hash.$delete(o)}, TMP_10.$$s = self, TMP_10), $a).call($b);
      return self;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    };

    def['$add?'] = function(o) {
      var $a, self = this;

      if ((($a = self['$include?'](o)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return nil
        } else {
        return self.$add(o)
      };
    };

    def.$each = TMP_12 = function() {
      var $a, $b, self = this, $iter = TMP_12.$$p, block = $iter || nil;

      TMP_12.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each")
      };
      ($a = ($b = self.hash).$each_key, $a.$$p = block.$to_proc(), $a).call($b);
      return self;
    };

    def['$empty?'] = function() {
      var self = this;

      return self.hash['$empty?']();
    };

    def['$eql?'] = function(other) {
      var $a, $b, TMP_13, self = this;

      return self.hash['$eql?'](($a = ($b = other).$instance_eval, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;
        if (self.hash == null) self.hash = nil;

      return self.hash}, TMP_13.$$s = self, TMP_13), $a).call($b));
    };

    def.$clear = function() {
      var self = this;

      self.hash.$clear();
      return self;
    };

    def['$include?'] = function(o) {
      var self = this;

      return self.hash['$include?'](o);
    };

    Opal.defn(self, '$member?', def['$include?']);

    def.$merge = function(enum$) {
      var $a, $b, TMP_14, self = this;

      ($a = ($b = enum$).$each, $a.$$p = (TMP_14 = function(item){var self = TMP_14.$$s || this;
if (item == null) item = nil;
      return self.$add(item)}, TMP_14.$$s = self, TMP_14), $a).call($b);
      return self;
    };

    def.$replace = function(enum$) {
      var self = this;

      self.$clear();
      self.$merge(enum$);
      return self;
    };

    def.$size = function() {
      var self = this;

      return self.hash.$size();
    };

    Opal.defn(self, '$length', def.$size);

    def.$subtract = function(enum$) {
      var $a, $b, TMP_15, self = this;

      ($a = ($b = enum$).$each, $a.$$p = (TMP_15 = function(item){var self = TMP_15.$$s || this;
if (item == null) item = nil;
      return self.$delete(item)}, TMP_15.$$s = self, TMP_15), $a).call($b);
      return self;
    };

    return (def.$to_a = function() {
      var self = this;

      return self.hash.$keys();
    }, nil) && 'to_a';
  })(self, null);
  return (function($base) {
    var self = $module($base, 'Enumerable');

    var def = self.$$proto, $scope = self.$$scope, TMP_16;

    Opal.defn(self, '$to_set', TMP_16 = function(klass, args) {
      var $a, $b, self = this, $iter = TMP_16.$$p, block = $iter || nil;

      args = $slice.call(arguments, 1);
      if (klass == null) {
        klass = $scope.get('Set')
      }
      TMP_16.$$p = null;
      return ($a = ($b = klass).$new, $a.$$p = block.$to_proc(), $a).apply($b, [self].concat(args));
    })
  })(self);
};

/* Generated by Opal 0.7.2 */
Opal.modules["active_support/inflector/inflections"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$extend', '$instance', '$split', '$empty?', '$const_get', '$>', '$size', '$first', '$shift', '$inject', '$==', '$const_defined?', '$ancestors', '$apply_inflections', '$plurals', '$inflections', '$singulars', '$to_s', '$include?', '$uncountables', '$downcase', '$each', '$sub', '$new', '$attr_reader', '$unshift', '$<<']);
  self.$require("set");
  return (function($base) {
    var self = $module($base, 'ActiveSupport');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Inflector');

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      self.$extend(self);

      Opal.defn(self, '$inflections', TMP_1 = function() {
        var $a, self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

        TMP_1.$$p = null;
        if (($yield !== nil)) {
          return $a = Opal.yield1($yield, $scope.get('Inflections').$instance()), $a === $breaker ? $a : $a
          } else {
          return $scope.get('Inflections').$instance()
        };
      });

      Opal.defn(self, '$constantize', function(camel_cased_word) {
        var $a, $b, TMP_2, self = this, names = nil;

        names = camel_cased_word.$split("::");
        if ((($a = names['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          $scope.get('Object').$const_get(camel_cased_word)};
        if ((($a = (($b = names.$size()['$>'](1)) ? names.$first()['$empty?']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          names.$shift()};
        return ($a = ($b = names).$inject, $a.$$p = (TMP_2 = function(constant, name){var self = TMP_2.$$s || this, $a, $b, TMP_3, candidate = nil;
if (constant == null) constant = nil;if (name == null) name = nil;
        if (constant['$==']($scope.get('Object'))) {
            return constant.$const_get(name)
            } else {
            candidate = constant.$const_get(name);
            if ((($a = constant['$const_defined?'](name, false)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return candidate;};
            if ((($a = $scope.get('Object')['$const_defined?'](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              return candidate;
            };
            constant = ($a = ($b = constant.$ancestors()).$inject, $a.$$p = (TMP_3 = function(const$, ancestor){var self = TMP_3.$$s || this, $a;
if (const$ == null) const$ = nil;if (ancestor == null) ancestor = nil;
            if (ancestor['$==']($scope.get('Object'))) {
                return ($breaker.$v = const$, $breaker)};
              if ((($a = ancestor['$const_defined?'](name, false)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return ($breaker.$v = ancestor, $breaker)};
              return const$;}, TMP_3.$$s = self, TMP_3), $a).call($b);
            return constant.$const_get(name, false);
          }}, TMP_2.$$s = self, TMP_2), $a).call($b, $scope.get('Object'));
      });

      Opal.defn(self, '$pluralize', function(word) {
        var self = this;

        return self.$apply_inflections(word, self.$inflections().$plurals());
      });

      Opal.defn(self, '$singularize', function(word) {
        var self = this;

        return self.$apply_inflections(word, self.$inflections().$singulars());
      });

      Opal.defn(self, '$apply_inflections', function(word, rules) {
        var $a, $b, TMP_4, self = this, result = nil;

        result = word.$to_s();
        if ((($a = self.$inflections().$uncountables()['$include?'](result.$downcase())) !== nil && (!$a.$$is_boolean || $a == true))) {
          return result
          } else {
          ($a = ($b = rules).$each, $a.$$p = (TMP_4 = function(rule, replacement){var self = TMP_4.$$s || this, changed = nil;
if (rule == null) rule = nil;if (replacement == null) replacement = nil;
          changed = result.$sub(rule, replacement);
            if (changed['$=='](result)) {
              return nil
              } else {
              result = changed;
              return ($breaker.$v = nil, $breaker);
            };}, TMP_4.$$s = self, TMP_4), $a).call($b);
          return result;
        };
      });

      (function($base, $super) {
        function $Inflections(){};
        var self = $Inflections = $klass($base, $super, 'Inflections', $Inflections);

        var def = self.$$proto, $scope = self.$$scope;

        def.plurals = def.singulars = nil;
        Opal.defs(self, '$instance', function() {
          var $a, self = this;
          if (self.__instance__ == null) self.__instance__ = nil;

          return ((($a = self.__instance__) !== false && $a !== nil) ? $a : self.__instance__ = self.$new());
        });

        self.$attr_reader("plurals", "singulars", "uncountables");

        def.$initialize = function() {
          var $a, self = this;

          return $a = [[], [], $scope.get('Set').$new()], self.plurals = $a[0], self.singulars = $a[1], self.uncountables = $a[2];
        };

        def.$plural = function(rule, replacement) {
          var self = this;

          return self.plurals.$unshift([rule, replacement]);
        };

        def.$singular = function(rule, replacement) {
          var self = this;

          return self.singulars.$unshift([rule, replacement]);
        };

        def.$uncountable = function(words) {
          var $a, $b, TMP_5, self = this;

          return ($a = ($b = words).$each, $a.$$p = (TMP_5 = function(w){var self = TMP_5.$$s || this;
            if (self.uncountables == null) self.uncountables = nil;
if (w == null) w = nil;
          return self.uncountables['$<<'](w.$downcase())}, TMP_5.$$s = self, TMP_5), $a).call($b);
        };

        return (def.$irregular = function() {
          var self = this;

          return nil;
        }, nil) && 'irregular';
      })(self, null);
    })(self)
  })(self);
};

/* Generated by Opal 0.7.2 */
Opal.modules["active_support/inflections"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$inflections', '$plural', '$singular', '$irregular', '$uncountable']);
  return (function($base) {
    var self = $module($base, 'ActiveSupport');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

    ($a = ($b = $scope.get('Inflector')).$inflections, $a.$$p = (TMP_1 = function(inflect){var self = TMP_1.$$s || this;
if (inflect == null) inflect = nil;
    inflect.$plural(/$/, "s");
      inflect.$plural(/s$/i, "s");
      inflect.$plural(/^(ax|test)is$/i, "\\1es");
      inflect.$plural(/(octop|vir)us$/i, "\\1i");
      inflect.$plural(/(octop|vir)i$/i, "\\1i");
      inflect.$plural(/(alias|status)$/i, "\\1es");
      inflect.$plural(/(bu)s$/i, "\\1ses");
      inflect.$plural(/(buffal|tomat)o$/i, "\\1oes");
      inflect.$plural(/([ti])um$/i, "\\1a");
      inflect.$plural(/([ti])a$/i, "\\1a");
      inflect.$plural(/sis$/i, "ses");
      inflect.$plural(/(?:([^f])fe|([lr])f)$/i, "\\1\\2ves");
      inflect.$plural(/(hive)$/i, "\\1s");
      inflect.$plural(/([^aeiouy]|qu)y$/i, "\\1ies");
      inflect.$plural(/(x|ch|ss|sh)$/i, "\\1es");
      inflect.$plural(/(matr|vert|ind)(?:ix|ex)$/i, "\\1ices");
      inflect.$plural(/^(m|l)ouse$/i, "\\1ice");
      inflect.$plural(/^(m|l)ice$/i, "\\1ice");
      inflect.$plural(/^(ox)$/i, "\\1en");
      inflect.$plural(/^(oxen)$/i, "\\1");
      inflect.$plural(/(quiz)$/i, "\\1zes");
      inflect.$singular(/s$/i, "");
      inflect.$singular(/(ss)$/i, "\\1");
      inflect.$singular(/(n)ews$/i, "\\1ews");
      inflect.$singular(/([ti])a$/i, "\\1um");
      inflect.$singular(/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(sis|ses)$/i, "\\1sis");
      inflect.$singular(/(^analy)(sis|ses)$/i, "\\1sis");
      inflect.$singular(/([^f])ves$/i, "\\1fe");
      inflect.$singular(/(hive)s$/i, "\\1");
      inflect.$singular(/(tive)s$/i, "\\1");
      inflect.$singular(/([lr])ves$/i, "\\1f");
      inflect.$singular(/([^aeiouy]|qu)ies$/i, "\\1y");
      inflect.$singular(/(s)eries$/i, "\\1eries");
      inflect.$singular(/(m)ovies$/i, "\\1ovie");
      inflect.$singular(/(x|ch|ss|sh)es$/i, "\\1");
      inflect.$singular(/^(m|l)ice$/i, "\\1ouse");
      inflect.$singular(/(bus)(es)?$/i, "\\1");
      inflect.$singular(/(o)es$/i, "\\1");
      inflect.$singular(/(shoe)s$/i, "\\1");
      inflect.$singular(/(cris|test)(is|es)$/i, "\\1is");
      inflect.$singular(/^(a)x[ie]s$/i, "\\1xis");
      inflect.$singular(/(octop|vir)(us|i)$/i, "\\1us");
      inflect.$singular(/(alias|status)(es)?$/i, "\\1");
      inflect.$singular(/^(ox)en/i, "\\1");
      inflect.$singular(/(vert|ind)ices$/i, "\\1ex");
      inflect.$singular(/(matr)ices$/i, "\\1ix");
      inflect.$singular(/(quiz)zes$/i, "\\1");
      inflect.$singular(/(database)s$/i, "\\1");
      inflect.$irregular("person", "people");
      inflect.$irregular("man", "men");
      inflect.$irregular("child", "children");
      inflect.$irregular("sex", "sexes");
      inflect.$irregular("move", "moves");
      inflect.$irregular("zombie", "zombies");
      return inflect.$uncountable(["equipment", "information", "rice", "money", "species", "series", "fish", "sheep", "jeans", "police"]);}, TMP_1.$$s = self, TMP_1), $a).call($b, "en")
  })(self)
};

/* Generated by Opal 0.7.2 */
Opal.modules["active_support/inflector"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("active_support/inflector/inflections");
  return self.$require("active_support/inflections");
};

/* Generated by Opal 0.7.2 */
Opal.modules["active_support/core_ext/string/inflections"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$pluralize', '$singularize', '$constantize']);
  self.$require("active_support/inflector");
  return (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope;

    def.$pluralize = function() {
      var self = this;

      return (($scope.get('ActiveSupport')).$$scope.get('Inflector')).$pluralize(self);
    };

    def.$singularize = function() {
      var self = this;

      return (($scope.get('ActiveSupport')).$$scope.get('Inflector')).$singularize(self);
    };

    return (def.$constantize = function() {
      var self = this;

      return (($scope.get('ActiveSupport')).$$scope.get('Inflector')).$constantize(self);
    }, nil) && 'constantize';
  })(self, null);
};

/* Generated by Opal 0.7.2 */
Opal.modules["active_support/core_ext/string"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$gsub', '$strip', '$downcase', '$underscore', '$alias_method']);
  self.$require("active_support/core_ext/string/inflections");
  return (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope;

    def.$parameterize = function() {
      var self = this;

      return self.$downcase().$strip().$gsub(/\W+/, "-");
    };

    def.$dasherize = function() {
      var self = this;

      return self.replace(/[-_\s]+/g, '-')
            .replace(/([A-Z\d]+)([A-Z][a-z])/g, '$1-$2')
            .replace(/([a-z\d])([A-Z])/g, '$1-$2')
            .toLowerCase();
    };

    def.$demodulize = function() {
      var self = this;

      
      var idx = self.lastIndexOf('::');

      if (idx > -1) {
        return self.substr(idx + 2);
      }

      return self;
    ;
    };

    def.$underscore = function() {
      var self = this;

      return self.replace(/[-\s]+/g, '_')
    .replace(/([A-Z\d]+)([A-Z][a-z])/g, '$1_$2')
    .replace(/([a-z\d])([A-Z])/g, '$1_$2')
    .replace(/-/g, '_')
    .toLowerCase();
    };

    def.$camelize = function(first_letter) {
      var self = this;

      if (first_letter == null) {
        first_letter = "upper"
      }
      return self.$underscore().replace(/(^|_)([^_]+)/g, function(match, pre, word, index) {
      var capitalize = first_letter === "upper" || index > 0;
      return capitalize ? word.substr(0,1).toUpperCase()+word.substr(1) : word;
    });
    };

    return self.$alias_method("camelcase", "camelize");
  })(self, null);
};

/* Generated by Opal 0.7.2 */
Opal.modules["active_support/core_ext"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("active_support/core_ext/array");
  self.$require("active_support/core_ext/class");
  self.$require("active_support/core_ext/enumerable");
  self.$require("active_support/core_ext/hash");
  self.$require("active_support/core_ext/integer");
  self.$require("active_support/core_ext/kernel");
  self.$require("active_support/core_ext/module");
  self.$require("active_support/core_ext/numeric");
  self.$require("active_support/core_ext/object");
  return self.$require("active_support/core_ext/string");
};

/* Generated by Opal 0.7.2 */
Opal.modules["active_support"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  return self.$require("active_support/core_ext")
};

/* Generated by Opal 0.7.2 */
Opal.modules["react/top_level"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$create_element', '$to_proc', '$Native', '$include', '$class', '$each', '$to_s', '$native_component_class']);
  self.$require("native");
  self.$require("active_support");
  return (function($base) {
    var self = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

    Opal.cdecl($scope, 'HTML_TAGS', ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr"]);

    Opal.cdecl($scope, 'ATTRIBUTES', ["accept", "acceptCharset", "accessKey", "action", "allowFullScreen", "allowTransparency", "alt", "async", "autoComplete", "autoPlay", "cellPadding", "cellSpacing", "charSet", "checked", "classID", "className", "cols", "colSpan", "content", "contentEditable", "contextMenu", "controls", "coords", "crossOrigin", "data", "dateTime", "defer", "dir", "disabled", "download", "draggable", "encType", "form", "formAction", "formEncType", "formMethod", "formNoValidate", "formTarget", "frameBorder", "height", "hidden", "href", "hrefLang", "htmlFor", "httpEquiv", "icon", "id", "label", "lang", "list", "loop", "manifest", "marginHeight", "marginWidth", "max", "maxLength", "media", "mediaGroup", "method", "min", "multiple", "muted", "name", "noValidate", "open", "pattern", "placeholder", "poster", "preload", "radioGroup", "readOnly", "rel", "required", "role", "rows", "rowSpan", "sandbox", "scope", "scrolling", "seamless", "selected", "shape", "size", "sizes", "span", "spellCheck", "src", "srcDoc", "srcSet", "start", "step", "style", "tabIndex", "target", "title", "type", "useMap", "value", "width", "wmode", "dangerouslySetInnerHTML"]);

    Opal.defs(self, '$create_element', TMP_1 = function(type, properties) {
      var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

      if (properties == null) {
        properties = $hash2([], {})
      }
      TMP_1.$$p = null;
      return ($a = ($b = (($scope.get('React')).$$scope.get('API'))).$create_element, $a.$$p = block.$to_proc(), $a).call($b, type, properties);
    });

    Opal.defs(self, '$render', TMP_2 = function(element, container) {
      var $a, self = this, $iter = TMP_2.$$p, $yield = $iter || nil, component = nil;

      TMP_2.$$p = null;
      component = self.$Native(React.render(element, container, function(){(function() {if (($yield !== nil)) {
        return $a = Opal.yieldX($yield, []), $a === $breaker ? $a : $a
        } else {
        return nil
      }; return nil; })()}));
      component.$class().$include((((($scope.get('React')).$$scope.get('Component'))).$$scope.get('API')));
      return component;
    });

    Opal.defs(self, '$is_valid_element', function(element) {
      var self = this;

      return React.isValidElement(element);
    });

    Opal.defs(self, '$render_to_string', function(element) {
      var self = this;

      return React.renderToString(element);
    });

    Opal.defs(self, '$render_to_static_markup', function(element) {
      var self = this;

      return React.renderToStaticMarkup(element);
    });

    Opal.defs(self, '$unmount_component_at_node', function(node) {
      var self = this;

      return React.unmountComponentAtNode(node);
    });

    Opal.defs(self, '$expose_native_class', function(args) {
      var $a, $b, TMP_3, self = this;

      args = $slice.call(arguments, 0);
      return ($a = ($b = args).$each, $a.$$p = (TMP_3 = function(klass){var self = TMP_3.$$s || this;
if (klass == null) klass = nil;
      return window[klass.$to_s()] = (($scope.get('React')).$$scope.get('API')).$native_component_class(klass);}, TMP_3.$$s = self, TMP_3), $a).call($b);
    });
  })(self);
};

/* Generated by Opal 0.7.2 */
Opal.modules["react/ext/string"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$event_camelize = function() {
      var self = this;

      return self.replace(/(^|_)([^_]+)/g, function(match, pre, word, index) {
      var capitalize = true;
      return capitalize ? word.substr(0,1).toUpperCase()+word.substr(1) : word;
    });
    }, nil) && 'event_camelize'
  })(self, null)
};

/* Generated by Opal 0.7.2 */
Opal.modules["react/callbacks"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$extend', '$send', '$class', '$each', '$is_a?', '$instance_exec', '$to_proc', '$class_attribute', '$define_singleton_method', '$concat', '$push']);
  self.$require("active_support/core_ext/class/attribute");
  return (function($base) {
    var self = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Callbacks');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defs(self, '$included', function(base) {
        var self = this;

        return base.$extend($scope.get('ClassMethods'));
      });

      Opal.defn(self, '$run_callback', function(name, args) {
        var $a, $b, TMP_1, self = this, attribute_name = nil, callbacks = nil;

        args = $slice.call(arguments, 1);
        attribute_name = "_" + (name) + "_callbacks";
        callbacks = self.$class().$send(attribute_name);
        return ($a = ($b = callbacks).$each, $a.$$p = (TMP_1 = function(callback){var self = TMP_1.$$s || this, $a, $b;
if (callback == null) callback = nil;
        if ((($a = callback['$is_a?']($scope.get('Proc'))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = self).$instance_exec, $a.$$p = callback.$to_proc(), $a).apply($b, [].concat(args))
            } else {
            return ($a = self).$send.apply($a, [callback].concat(args))
          }}, TMP_1.$$s = self, TMP_1), $a).call($b);
      });

      (function($base) {
        var self = $module($base, 'ClassMethods');

        var def = self.$$proto, $scope = self.$$scope, TMP_3;

        Opal.defn(self, '$define_callback', TMP_3 = function(callback_name) {
          var $a, $b, TMP_2, self = this, $iter = TMP_3.$$p, $yield = $iter || nil, attribute_name = nil;

          TMP_3.$$p = null;
          attribute_name = "_" + (callback_name) + "_callbacks";
          self.$class_attribute(attribute_name);
          self.$send("" + (attribute_name) + "=", []);
          return ($a = ($b = self).$define_singleton_method, $a.$$p = (TMP_2 = function(args){var self = TMP_2.$$s || this, block, callbacks = nil;
args = $slice.call(arguments, 0);
            block = TMP_2.$$p || nil, TMP_2.$$p = null;
          callbacks = self.$send(attribute_name);
            callbacks.$concat(args);
            if ((block !== nil)) {
              callbacks.$push(block)};
            return self.$send("" + (attribute_name) + "=", callbacks);}, TMP_2.$$s = self, TMP_2), $a).call($b, callback_name);
        })
      })(self);
    })(self)
  })(self);
};

/* Generated by Opal 0.7.2 */
Opal.modules["react/ext/hash"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$map']);
  return (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$shallow_to_n = function() {
      var $a, $b, TMP_1, self = this, hash = nil;

      hash = {};
      ($a = ($b = self).$map, $a.$$p = (TMP_1 = function(key, value){var self = TMP_1.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
      return hash[key] = value;}, TMP_1.$$s = self, TMP_1), $a).call($b);
      return hash;
    }, nil) && 'shallow_to_n'
  })(self, null)
};

/* Generated by Opal 0.7.2 */
Opal.modules["react/component"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$include', '$class_eval', '$class_attribute', '$define_callback', '$extend', '$new', '$raise', '$call', '$[]', '$params', '$event_camelize', '$to_s', '$run_callback', '$respond_to?', '$needs_update?', '$==', '$count', '$is_a?', '$first', '$_p_tag', '$to_proc', '$p', '$include?', '$shift', '$create_element', '$<<', '$validator', '$validate', '$+', '$name', '$join', '$>', '$init_state', '$default_props', '$evaluate_more_rules', '$validator=', '$build', '$init_state=', '$[]=', '$each', '$define_method', '$state', '$set_state', '$alias_native', '$shallow_to_n']);
  self.$require("react/ext/string");
  self.$require("active_support/core_ext/class/attribute");
  self.$require("react/callbacks");
  self.$require("react/ext/hash");
  return (function($base) {
    var self = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3;

      Opal.defs(self, '$included', function(base) {
        var $a, $b, TMP_1, self = this;

        base.$include($scope.get('API'));
        base.$include((($scope.get('React')).$$scope.get('Callbacks')));
        ($a = ($b = base).$class_eval, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;

        self.$class_attribute("init_state", "validator");
          self.$define_callback("before_mount");
          self.$define_callback("after_mount");
          self.$define_callback("before_receive_props");
          self.$define_callback("before_update");
          self.$define_callback("after_update");
          return self.$define_callback("before_unmount");}, TMP_1.$$s = self, TMP_1), $a).call($b);
        return base.$extend($scope.get('ClassMethods'));
      });

      Opal.defn(self, '$initialize', function(native_element) {
        var self = this;

        return self["native"] = native_element;
      });

      Opal.defn(self, '$params', function() {
        var self = this;
        if (self["native"] == null) self["native"] = nil;

        return $scope.get('Hash').$new(self["native"].props);
      });

      Opal.defn(self, '$refs', function() {
        var self = this;
        if (self["native"] == null) self["native"] = nil;

        return $scope.get('Hash').$new(self["native"].refs);
      });

      Opal.defn(self, '$state', function() {
        var $a, self = this;
        if (self["native"] == null) self["native"] = nil;

        if ((($a = self["native"]) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$raise("No native ReactComponent associated")
        };
        return $scope.get('Hash').$new(self["native"].state);
      });

      Opal.defn(self, '$emit', function(event_name, args) {
        var $a, self = this;

        args = $slice.call(arguments, 1);
        return ($a = self.$params()['$[]']("_on" + (event_name.$to_s().$event_camelize()))).$call.apply($a, [].concat(args));
      });

      Opal.defn(self, '$component_will_mount', function() {
        var self = this;

        return self.$run_callback("before_mount");
      });

      Opal.defn(self, '$component_did_mount', function() {
        var self = this;

        return self.$run_callback("after_mount");
      });

      Opal.defn(self, '$component_will_receive_props', function(next_props) {
        var self = this;

        return self.$run_callback("before_receive_props", $scope.get('Hash').$new(next_props));
      });

      Opal.defn(self, '$should_component_update?', function(next_props, next_state) {
        var $a, self = this;

        if ((($a = self['$respond_to?']("needs_update?")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self['$needs_update?']($scope.get('Hash').$new(next_props), $scope.get('Hash').$new(next_state))
          } else {
          return true
        };
      });

      Opal.defn(self, '$component_will_update', function(next_props, next_state) {
        var self = this;

        return self.$run_callback("before_update", $scope.get('Hash').$new(next_props), $scope.get('Hash').$new(next_state));
      });

      Opal.defn(self, '$component_did_update', function(prev_props, prev_state) {
        var self = this;

        return self.$run_callback("after_update", $scope.get('Hash').$new(prev_props), $scope.get('Hash').$new(prev_state));
      });

      Opal.defn(self, '$component_will_unmount', function() {
        var self = this;

        return self.$run_callback("before_unmount");
      });

      Opal.defn(self, '$p', TMP_2 = function(args) {
        var $a, $b, $c, self = this, $iter = TMP_2.$$p, block = $iter || nil;

        args = $slice.call(arguments, 0);
        TMP_2.$$p = null;
        if ((($a = ((($b = ((($c = block) !== false && $c !== nil) ? $c : args.$count()['$=='](0))) !== false && $b !== nil) ? $b : ((($c = args.$count()['$=='](1)) ? args.$first()['$is_a?']($scope.get('Hash')) : $c)))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = self).$_p_tag, $a.$$p = block.$to_proc(), $a).apply($b, [].concat(args))
          } else {
          return ($a = $scope.get('Kernel')).$p.apply($a, [].concat(args))
        };
      });

      Opal.defn(self, '$method_missing', TMP_3 = function(name, args) {var $zuper = $slice.call(arguments, 0);
        var $a, $b, $c, TMP_4, self = this, $iter = TMP_3.$$p, block = $iter || nil, current = nil, result = nil, element = nil;
        if (self.buffer == null) self.buffer = nil;

        args = $slice.call(arguments, 1);
        TMP_3.$$p = null;
        if ((($a = (((($b = ((($c = (($scope.get('React')).$$scope.get('HTML_TAGS'))['$include?'](name)) !== false && $c !== nil) ? $c : name['$==']("present"))) !== false && $b !== nil) ? $b : name['$==']("_p_tag")))) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          return Opal.find_super_dispatcher(self, 'method_missing', TMP_3, $iter).apply(self, $zuper)
        };
        if (name['$==']("present")) {
          name = args.$shift()};
        if (name['$==']("_p_tag")) {
          name = "p"};
        if ((($a = self.buffer) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.buffer = []
        };
        if (block !== false && block !== nil) {
          current = self.buffer;
          self.buffer = [];
          result = block.$call();
          element = ($a = ($b = $scope.get('React')).$create_element, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;
            if (self.buffer == null) self.buffer = nil;

          if (self.buffer.$count()['$=='](0)) {
              return result
              } else {
              return self.buffer
            }}, TMP_4.$$s = self, TMP_4), $a).apply($b, [name].concat(args));
          self.buffer = current;
          } else {
          element = ($a = $scope.get('React')).$create_element.apply($a, [name].concat(args))
        };
        self.buffer['$<<'](element);
        return element;
      });

      (function($base) {
        var self = $module($base, 'ClassMethods');

        var def = self.$$proto, $scope = self.$$scope, TMP_5, TMP_6;

        Opal.defn(self, '$prop_types', function() {
          var $a, self = this;

          if ((($a = self.$validator()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $hash2(["_componentValidator"], {"_componentValidator": 
              function(props, propName, componentName) {
                var errors = self.$validator().$validate($scope.get('Hash').$new(props));
                var error = new Error("In component `"['$+'](self.$name())['$+']("`\n")['$+']((errors).$join("\n")));
                return (function() {if ((errors).$count()['$>'](0)) {
              return error;
              } else {
              return undefined;
            }; return nil; })();
              }
            })
            } else {
            return $hash2([], {})
          };
        });

        Opal.defn(self, '$initial_state', function() {
          var $a, self = this;

          return ((($a = self.$init_state()) !== false && $a !== nil) ? $a : $hash2([], {}));
        });

        Opal.defn(self, '$default_props', function() {
          var $a, self = this;

          if ((($a = self.$validator()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$validator().$default_props()
            } else {
            return $hash2([], {})
          };
        });

        Opal.defn(self, '$params', TMP_5 = function() {
          var $a, $b, $c, $d, $e, self = this, $iter = TMP_5.$$p, block = $iter || nil;

          TMP_5.$$p = null;
          if ((($a = self.$validator()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = self.$validator()).$evaluate_more_rules, $a.$$p = block.$to_proc(), $a).call($b)
            } else {
            return (($a = [($d = ($e = (($scope.get('React')).$$scope.get('Validator'))).$build, $d.$$p = block.$to_proc(), $d).call($e)]), $c = self, $c['$validator='].apply($c, $a), $a[$a.length-1])
          };
        });

        Opal.defn(self, '$define_state', TMP_6 = function(states) {try {

          var $a, $b, TMP_7, self = this, $iter = TMP_6.$$p, $yield = $iter || nil;

          states = $slice.call(arguments, 0);
          TMP_6.$$p = null;
          if ((($a = (($b = ($yield !== nil)) ? states.$count()['$>'](1) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$raise("Block could be only given when define exactly one state")};
          if ((($a = self.$init_state()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            (($a = [$hash2([], {})]), $b = self, $b['$init_state='].apply($b, $a), $a[$a.length-1])
          };
          if (($yield !== nil)) {
            self.$init_state()['$[]='](states['$[]'](0), ((($a = Opal.yieldX($yield, [])) === $breaker) ? $breaker.$v : $a))};
          return ($a = ($b = states).$each, $a.$$p = (TMP_7 = function(name){var self = TMP_7.$$s || this, $a, $b, TMP_8, $c, TMP_9;
if (name == null) name = nil;
          ($a = ($b = self).$define_method, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $a;
              if (self["native"] == null) self["native"] = nil;

            if ((($a = self["native"]) !== nil && (!$a.$$is_boolean || $a == true))) {
                } else {
                Opal.ret(nil)
              };
              return self.$state()['$[]'](name);}, TMP_8.$$s = self, TMP_8), $a).call($b, "" + (name));
            return ($a = ($c = self).$define_method, $a.$$p = (TMP_9 = function(new_state){var self = TMP_9.$$s || this, $a, hash = nil;
              if (self["native"] == null) self["native"] = nil;
if (new_state == null) new_state = nil;
            if ((($a = self["native"]) !== nil && (!$a.$$is_boolean || $a == true))) {
                } else {
                Opal.ret(nil)
              };
              hash = $hash2([], {});
              hash['$[]='](name, new_state);
              self.$set_state(hash);
              return new_state;}, TMP_9.$$s = self, TMP_9), $a).call($c, "" + (name) + "=");}, TMP_7.$$s = self, TMP_7), $a).call($b);
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        });
      })(self);

      (function($base) {
        var self = $module($base, 'API');

        var def = self.$$proto, $scope = self.$$scope, TMP_10, TMP_11, TMP_12, TMP_13;

        self.$include($scope.get('Native'));

        self.$alias_native("dom_node", "getDOMNode");

        self.$alias_native("mounted?", "isMounted");

        self.$alias_native("force_update!", "forceUpdate");

        Opal.defn(self, '$set_props', TMP_10 = function(prop) {
          var $a, self = this, $iter = TMP_10.$$p, block = $iter || nil;
          if (self["native"] == null) self["native"] = nil;

          TMP_10.$$p = null;
          if ((($a = self["native"]) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$raise("No native ReactComponent associated")
          };
          
          self["native"].setProps(prop.$shallow_to_n(), function(){
            (function() {if (block !== false && block !== nil) {
            return block.$call()
            } else {
            return nil
          }; return nil; })()
          });
        ;
        });

        Opal.defn(self, '$set_props!', TMP_11 = function(prop) {
          var $a, self = this, $iter = TMP_11.$$p, block = $iter || nil;
          if (self["native"] == null) self["native"] = nil;

          TMP_11.$$p = null;
          if ((($a = self["native"]) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$raise("No native ReactComponent associated")
          };
          
          self["native"].replaceProps(prop.$shallow_to_n(), function(){
            (function() {if (block !== false && block !== nil) {
            return block.$call()
            } else {
            return nil
          }; return nil; })()
          });
        ;
        });

        Opal.defn(self, '$set_state', TMP_12 = function(state) {
          var $a, self = this, $iter = TMP_12.$$p, block = $iter || nil;
          if (self["native"] == null) self["native"] = nil;

          TMP_12.$$p = null;
          if ((($a = self["native"]) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$raise("No native ReactComponent associated")
          };
          
          self["native"].setState(state.$shallow_to_n(), function(){
            (function() {if (block !== false && block !== nil) {
            return block.$call()
            } else {
            return nil
          }; return nil; })()
          });
        ;
        });

        Opal.defn(self, '$set_state!', TMP_13 = function(state) {
          var $a, self = this, $iter = TMP_13.$$p, block = $iter || nil;
          if (self["native"] == null) self["native"] = nil;

          TMP_13.$$p = null;
          if ((($a = self["native"]) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$raise("No native ReactComponent associated")
          };
          
          self["native"].replaceState(state.$shallow_to_n(), function(){
            (function() {if (block !== false && block !== nil) {
            return block.$call()
            } else {
            return nil
          }; return nil; })()
          });
        ;
        });
      })(self);
    })(self)
  })(self);
};

/* Generated by Opal 0.7.2 */
Opal.modules["react/element"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$raise', '$Native', '$new', '$event_camelize', '$to_s', '$include?', '$Array', '$==', '$include', '$to_n', '$call', '$<<']);
  self.$require("react/ext/string");
  return (function($base) {
    var self = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Element(){};
      var self = $Element = $klass($base, $super, 'Element', $Element);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      Opal.defs(self, '$new', function() {
        var self = this;

        return self.$raise("use React.create_element instead");
      });

      def.$element_type = function() {
        var self = this;

        return self.type;
      };

      def.$key = function() {
        var self = this;

        return self.$Native(self.key);
      };

      def.$props = function() {
        var self = this;

        return $scope.get('Hash').$new(self.props);
      };

      def.$ref = function() {
        var self = this;

        return self.$Native(self.ref);
      };

      def.$on = TMP_1 = function(event_name) {
        var $a, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, name = nil, prop_key = nil, callback = nil;

        TMP_1.$$p = null;
        name = event_name.$to_s().$event_camelize();
        if ((($a = (((($scope.get('React')).$$scope.get('Event'))).$$scope.get('BUILT_IN_EVENTS'))['$include?']("on" + (name))) !== nil && (!$a.$$is_boolean || $a == true))) {
          prop_key = "on" + (name);
          callback = 
          function(event){
            ((($a = Opal.yield1($yield, (($scope.get('React')).$$scope.get('Event')).$new(event))) === $breaker) ? $breaker.$v : $a)
          }
        ;
          } else {
          prop_key = "_on" + (name);
          callback = 
          function(){
            ((($a = Opal.yieldX($yield, [].concat(self.$Array(arguments)))) === $breaker) ? $breaker.$v : $a)
          }
        ;
        };
        self.props[prop_key] = callback;
        return self;
      };

      def.$children = function() {
        var $a, self = this, nodes = nil;

        nodes = self.props.children;
        if ((React.Children.count(nodes))['$=='](0)) {
          return [];
        } else if ((React.Children.count(nodes))['$=='](1)) {
          if ((($a = (typeof nodes === 'string') || (typeof nodes === 'number')) !== nil && (!$a.$$is_boolean || $a == true))) {
            return [nodes]
            } else {
            return [React.Children.only(nodes)];
          }
          } else {
          (function(self) {
            var $scope = self.$$scope, def = self.$$proto;

            self.$include($scope.get('Enumerable'));
            self.$$proto.$to_n = function() {
              var self = this;

              return self;
            };
            return (self.$$proto.$each = TMP_2 = function() {
              var $a, $b, TMP_3, self = this, $iter = TMP_2.$$p, block = $iter || nil;

              TMP_2.$$p = null;
              if ((block !== nil)) {
                
                React.Children.forEach(self.$to_n(), function(context){
                  block.$call(context)
                })
              ;
                } else {
                return ($a = ($b = $scope.get('Enumerator')).$new, $a.$$p = (TMP_3 = function(y){var self = TMP_3.$$s || this;
if (y == null) y = nil;
                
                  React.Children.forEach(self.$to_n(), function(context){
                    y['$<<'](context)
                  })
                ;}, TMP_3.$$s = self, TMP_3), $a).call($b, React.Children.count(self.$to_n()))
              };
            }, nil) && 'each';
          })(nodes.$singleton_class());
          return nodes;
        };
      };

      return (def.$to_n = function() {
        var self = this;

        return self;
      }, nil) && 'to_n';
    })(self, (function(){var r = React;var f = function(){};var c = r.createClass({render:function(){return null;}});f.prototype = Object.getPrototypeOf(r.createElement(c));return f;})())
  })(self);
};

/* Generated by Opal 0.7.2 */
Opal.modules["react/event"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$alias_native']);
  return (function($base) {
    var self = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      self.$include($scope.get('Native'));

      self.$alias_native("bubbles", "bubbles");

      self.$alias_native("cancelable", "cancelable");

      self.$alias_native("current_target", "currentTarget");

      self.$alias_native("default_prevented", "defaultPrevented");

      self.$alias_native("event_phase", "eventPhase");

      self.$alias_native("is_trusted?", "isTrusted");

      self.$alias_native("native_event", "nativeEvent");

      self.$alias_native("target", "target");

      self.$alias_native("timestamp", "timeStamp");

      self.$alias_native("event_type", "type");

      self.$alias_native("prevent_default", "preventDefault");

      self.$alias_native("stop_propagation", "stopPropagation");

      self.$alias_native("clipboard_data", "clipboardData");

      self.$alias_native("alt_key", "altKey");

      self.$alias_native("char_code", "charCode");

      self.$alias_native("ctrl_key", "ctrlKey");

      self.$alias_native("get_modifier_state", "getModifierState");

      self.$alias_native("key", "key");

      self.$alias_native("key_code", "keyCode");

      self.$alias_native("locale", "locale");

      self.$alias_native("location", "location");

      self.$alias_native("meta_key", "metaKey");

      self.$alias_native("repeat", "repeat");

      self.$alias_native("shift_key", "shiftKey");

      self.$alias_native("which", "which");

      self.$alias_native("related_target", "relatedTarget");

      self.$alias_native("alt_key", "altKey");

      self.$alias_native("button", "button");

      self.$alias_native("buttons", "buttons");

      self.$alias_native("client_x", "clientX");

      self.$alias_native("client_y", "clientY");

      self.$alias_native("ctrl_key", "ctrlKey");

      self.$alias_native("get_modifier_state", "getModifierState");

      self.$alias_native("meta_key", "metaKey");

      self.$alias_native("page_x", "pageX");

      self.$alias_native("page_y", "pageY");

      self.$alias_native("related_target", "relatedTarget");

      self.$alias_native("screen_x", "screen_x");

      self.$alias_native("screen_y", "screen_y");

      self.$alias_native("shift_key", "shift_key");

      self.$alias_native("alt_key", "altKey");

      self.$alias_native("changed_touches", "changedTouches");

      self.$alias_native("ctrl_key", "ctrlKey");

      self.$alias_native("get_modifier_state", "getModifierState");

      self.$alias_native("meta_key", "metaKey");

      self.$alias_native("shift_key", "shiftKey");

      self.$alias_native("target_touches", "targetTouches");

      self.$alias_native("touches", "touches");

      self.$alias_native("detail", "detail");

      self.$alias_native("view", "view");

      self.$alias_native("delta_mode", "deltaMode");

      self.$alias_native("delta_x", "deltaX");

      self.$alias_native("delta_y", "deltaY");

      self.$alias_native("delta_z", "deltaZ");

      Opal.cdecl($scope, 'BUILT_IN_EVENTS', ["onCopy", "onCut", "onPaste", "onKeyDown", "onKeyPress", "onKeyUp", "onFocus", "onBlur", "onChange", "onInput", "onSubmit", "onClick", "onDoubleClick", "onDrag", "onDragEnd", "onDragEnter", "onDragExit", "onDragLeave", "onDragOver", "onDragStart", "onDrop", "onMouseDown", "onMouseEnter", "onMouseLeave", "onMouseMove", "onMouseOut", "onMouseOver", "onMouseUp", "onTouchCancel", "onTouchEnd", "onTouchMove", "onTouchStart", "onScroll"]);

      return (def.$initialize = function(native_element) {
        var self = this;

        return self["native"] = native_element;
      }, nil) && 'initialize';
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.2 */
Opal.modules["react/version"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base) {
    var self = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'VERSION', "0.3.0")
  })(self)
};

/* Generated by Opal 0.7.2 */
Opal.modules["react/api"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$<<', '$kind_of?', '$!', '$method_defined?', '$raise', '$native_component_class', '$include?', '$map', '$==', '$is_a?', '$[]=', '$lower_camelize', '$join', '$inject', '$push', '$shallow_to_n', '$each', '$to_n', '$flatten', '$to_s', '$[]', '$respond_to?', '$prop_types', '$default_props', '$initial_state', '$component_will_mount', '$component_did_mount', '$component_will_receive_props', '$should_component_update?', '$component_will_update', '$component_did_update', '$component_will_unmount', '$new', '$private', '$split', '$first', '$concat', '$+', '$upcase']);
  return (function($base) {
    var self = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $API(){};
      var self = $API = $klass($base, $super, 'API', $API);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      (Opal.cvars['@@component_classes'] = $hash2([], {}));

      Opal.defs(self, '$create_element', TMP_1 = function(type, properties) {
        var $a, $b, TMP_2, $c, TMP_4, $d, self = this, $iter = TMP_1.$$p, block = $iter || nil, params = nil, props = nil, children = nil;

        if (properties == null) {
          properties = $hash2([], {})
        }
        TMP_1.$$p = null;
        params = [];
        if ((($a = (typeof type === 'function')) !== nil && (!$a.$$is_boolean || $a == true))) {
          params['$<<'](type)
        } else if ((($a = type['$kind_of?']($scope.get('Class'))) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = (type['$method_defined?']("render"))['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$raise("Provided class should define `render` method")};
          params['$<<'](self.$native_component_class(type));
          } else {
          if ((($a = $scope.get('HTML_TAGS')['$include?'](type)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$raise("" + (type) + " not implemented")
          };
          params['$<<'](type);
        };
        props = $hash2([], {});
        ($a = ($b = properties).$map, $a.$$p = (TMP_2 = function(key, value){var self = TMP_2.$$s || this, $a, $b, TMP_3;
if (key == null) key = nil;if (value == null) value = nil;
        if ((($a = (($b = key['$==']("class_name")) ? value['$is_a?']($scope.get('Hash')) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return props['$[]='](self.$lower_camelize(key), ($a = ($b = value).$inject, $a.$$p = (TMP_3 = function(ary, $c){var self = TMP_3.$$s || this;
if (ary == null) ary = nil;k = $c[0];v = $c[1];
            if (v !== false && v !== nil) {
                return ary.$push(k)
                } else {
                return ary
              }}, TMP_3.$$s = self, TMP_3), $a).call($b, []).$join(" "))
            } else {
            return props['$[]=']((function() {if ((($a = (($scope.get('React')).$$scope.get('ATTRIBUTES'))['$include?'](self.$lower_camelize(key))) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.$lower_camelize(key)
              } else {
              return key
            }; return nil; })(), value)
          }}, TMP_2.$$s = self, TMP_2), $a).call($b);
        params['$<<'](props.$shallow_to_n());
        if ((block !== nil)) {
          children = ($a = ($c = [((($d = Opal.yieldX(block, [])) === $breaker) ? $breaker.$v : $d)].$flatten()).$each, $a.$$p = (TMP_4 = function(ele){var self = TMP_4.$$s || this;
if (ele == null) ele = nil;
          return params['$<<'](ele.$to_n())}, TMP_4.$$s = self, TMP_4), $a).call($c)};
        return React.createElement.apply(null, params);
      });

      Opal.defs(self, '$clear_component_class_cache', function() {
        var self = this;

        return (Opal.cvars['@@component_classes'] = $hash2([], {}));
      });

      Opal.defs(self, '$native_component_class', function(type) {
        var $a, $b, $c, $d, self = this;

        return ($a = type.$to_s(), $b = (($c = Opal.cvars['@@component_classes']) == null ? nil : $c), ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, 
        React.createClass({
          propTypes: (function() {if ((($d = type['$respond_to?']("prop_types")) !== nil && (!$d.$$is_boolean || $d == true))) {
          return type.$prop_types().$to_n()
          } else {
          return {};
        }; return nil; })(),
          getDefaultProps: function(){
            return (function() {if ((($d = type['$respond_to?']("default_props")) !== nil && (!$d.$$is_boolean || $d == true))) {
          return type.$default_props().$to_n()
          } else {
          return {};
        }; return nil; })();
          },
          getInitialState: function(){
            return (function() {if ((($d = type['$respond_to?']("initial_state")) !== nil && (!$d.$$is_boolean || $d == true))) {
          return type.$initial_state().$to_n()
          } else {
          return {};
        }; return nil; })();
          },
          componentWillMount: function() {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("component_will_mount")) !== nil && (!$d.$$is_boolean || $d == true))) {
          return (instance).$component_will_mount()
          } else {
          return nil
        }; return nil; })();
          },
          componentDidMount: function() {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("component_did_mount")) !== nil && (!$d.$$is_boolean || $d == true))) {
          return (instance).$component_did_mount()
          } else {
          return nil
        }; return nil; })();
          },
          componentWillReceiveProps: function(next_props) {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("component_will_receive_props")) !== nil && (!$d.$$is_boolean || $d == true))) {
          return (instance).$component_will_receive_props(next_props)
          } else {
          return nil
        }; return nil; })();
          },
          shouldComponentUpdate: function(next_props, next_state) {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("should_component_update?")) !== nil && (!$d.$$is_boolean || $d == true))) {
          return (instance)['$should_component_update?'](next_props, next_state)
          } else {
          return nil
        }; return nil; })();
          },
          componentWillUpdate: function(next_props, next_state) {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("component_will_update")) !== nil && (!$d.$$is_boolean || $d == true))) {
          return (instance).$component_will_update(next_props, next_state)
          } else {
          return nil
        }; return nil; })();
          },
          componentDidUpdate: function(prev_props, prev_state) {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("component_did_update")) !== nil && (!$d.$$is_boolean || $d == true))) {
          return (instance).$component_did_update(prev_props, prev_state)
          } else {
          return nil
        }; return nil; })();
          },
          componentWillUnmount: function() {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("component_will_unmount")) !== nil && (!$d.$$is_boolean || $d == true))) {
          return (instance).$component_will_unmount()
          } else {
          return nil
        }; return nil; })();
          },
          _getOpalInstance: function() {
            if (this.__opalInstance == undefined) {
              var instance = type.$new(this);
            } else {
              var instance = this.__opalInstance;
            }
            this.__opalInstance = instance;
            return instance;
          },
          displayName: type.$to_s(),
          render: function() {
            var instance = this._getOpalInstance.apply(this);
            return instance.$render();
          }
        })
      )));
      });

      self.$private();

      return (Opal.defs(self, '$lower_camelize', function(snake_cased_word) {
        var $a, $b, TMP_5, self = this, words = nil, result = nil;

        words = snake_cased_word.$split("_");
        result = [words.$first()];
        result.$concat(($a = ($b = words['$[]']($range(1, -1, false))).$map, $a.$$p = (TMP_5 = function(word){var self = TMP_5.$$s || this;
if (word == null) word = nil;
        return word['$[]'](0).$upcase()['$+'](word['$[]']($range(1, -1, false)))}, TMP_5.$$s = self, TMP_5), $a).call($b));
        return result.$join("");
      }), nil) && 'lower_camelize';
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.2 */
Opal.modules["react/validator"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new', '$instance_eval', '$to_proc', '$[]=', '$each', '$==', '$[]', '$<<', '$keys', '$select', '$include?', '$-', '$is_a?', '$all?', '$inject']);
  return (function($base) {
    var self = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Validator(){};
      var self = $Validator = $klass($base, $super, 'Validator', $Validator);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

      def.rules = nil;
      Opal.defs(self, '$build', TMP_1 = function() {
        var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil, validator = nil;

        TMP_1.$$p = null;
        validator = self.$new();
        ($a = ($b = validator).$instance_eval, $a.$$p = block.$to_proc(), $a).call($b);
        return validator;
      });

      def.$initialize = function() {
        var self = this;

        return self.rules = $hash2([], {});
      };

      def.$evaluate_more_rules = TMP_2 = function() {
        var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil;

        TMP_2.$$p = null;
        return ($a = ($b = self).$instance_eval, $a.$$p = block.$to_proc(), $a).call($b);
      };

      def.$requires = function(prop_name, options) {
        var self = this, rule = nil;

        if (options == null) {
          options = $hash2([], {})
        }
        rule = options;
        options['$[]=']("required", true);
        return self.rules['$[]='](prop_name, options);
      };

      def.$optional = function(prop_name, options) {
        var self = this, rule = nil;

        if (options == null) {
          options = $hash2([], {})
        }
        rule = options;
        options['$[]=']("required", false);
        return self.rules['$[]='](prop_name, options);
      };

      def.$validate = function(props) {
        var $a, $b, TMP_3, $c, TMP_4, $d, TMP_5, $e, TMP_6, $f, TMP_8, self = this, errors = nil;

        errors = [];
        ($a = ($b = props.$keys()).$each, $a.$$p = (TMP_3 = function(prop_name){var self = TMP_3.$$s || this;
          if (self.rules == null) self.rules = nil;
if (prop_name == null) prop_name = nil;
        if (self.rules['$[]'](prop_name)['$=='](nil)) {
            return errors['$<<']("Provided prop `" + (prop_name) + "` not specified in spec")
            } else {
            return nil
          }}, TMP_3.$$s = self, TMP_3), $a).call($b);
        props = ($a = ($c = props).$select, $a.$$p = (TMP_4 = function(key){var self = TMP_4.$$s || this;
          if (self.rules == null) self.rules = nil;
if (key == null) key = nil;
        return self.rules.$keys()['$include?'](key)}, TMP_4.$$s = self, TMP_4), $a).call($c);
        ($a = ($d = (self.rules.$keys()['$-'](props.$keys()))).$each, $a.$$p = (TMP_5 = function(prop_name){var self = TMP_5.$$s || this, $a;
          if (self.rules == null) self.rules = nil;
if (prop_name == null) prop_name = nil;
        if ((($a = self.rules['$[]'](prop_name)['$[]']("required")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return errors['$<<']("Required prop `" + (prop_name) + "` was not specified")
            } else {
            return nil
          }}, TMP_5.$$s = self, TMP_5), $a).call($d);
        ($a = ($e = props).$each, $a.$$p = (TMP_6 = function(prop_name, value){var self = TMP_6.$$s || this, $a, $b, $c, TMP_7, klass = nil;
          if (self.rules == null) self.rules = nil;
if (prop_name == null) prop_name = nil;if (value == null) value = nil;
        if ((($a = klass = self.rules['$[]'](prop_name)['$[]']("type")) !== nil && (!$a.$$is_boolean || $a == true))) {
            if ((($a = klass['$is_a?']($scope.get('Array'))) !== nil && (!$a.$$is_boolean || $a == true))) {
              if ((($a = ($b = ($c = value)['$all?'], $b.$$p = (TMP_7 = function(ele){var self = TMP_7.$$s || this;
if (ele == null) ele = nil;
              return ele['$is_a?'](klass['$[]'](0))}, TMP_7.$$s = self, TMP_7), $b).call($c)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return nil
                } else {
                return errors['$<<']("Provided prop `" + (prop_name) + "` was not an Array of the specified type `" + (klass['$[]'](0)) + "`")
              }
            } else if ((($a = value['$is_a?'](klass)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return errors['$<<']("Provided prop `" + (prop_name) + "` was not the specified type `" + (klass) + "`")
            }
            } else {
            return nil
          }}, TMP_6.$$s = self, TMP_6), $a).call($e);
        ($a = ($f = props).$each, $a.$$p = (TMP_8 = function(prop_name, value){var self = TMP_8.$$s || this, $a, values = nil;
          if (self.rules == null) self.rules = nil;
if (prop_name == null) prop_name = nil;if (value == null) value = nil;
        if ((($a = values = self.rules['$[]'](prop_name)['$[]']("values")) !== nil && (!$a.$$is_boolean || $a == true))) {
            if ((($a = values['$include?'](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return errors['$<<']("Value `" + (value) + "` for prop `" + (prop_name) + "` is not an allowed value")
            }
            } else {
            return nil
          }}, TMP_8.$$s = self, TMP_8), $a).call($f);
        return errors;
      };

      return (def.$default_props = function() {
        var $a, $b, TMP_9, $d, $e, TMP_10, self = this;

        return ($a = ($b = ($d = ($e = self.rules).$select, $d.$$p = (TMP_10 = function(key, value){var self = TMP_10.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
        return value.$keys()['$include?']("default")}, TMP_10.$$s = self, TMP_10), $d).call($e)).$inject, $a.$$p = (TMP_9 = function(memo, $c){var self = TMP_9.$$s || this;
if (memo == null) memo = nil;k = $c[0];v = $c[1];
        memo['$[]='](k, v['$[]']("default"));
          return memo;}, TMP_9.$$s = self, TMP_9), $a).call($b, $hash2([], {}));
      }, nil) && 'default_props';
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.2 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$==', '$require']);
  if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
    self.$require("react/top_level");
    self.$require("react/component");
    self.$require("react/element");
    self.$require("react/event");
    self.$require("react/version");
    self.$require("react/api");
    return self.$require("react/validator");}
})(Opal);
